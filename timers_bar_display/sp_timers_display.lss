
sp_timers_display.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000052a  000005be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000052a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000017  00800102  00800102  000005c0  2**0
                  ALLOC
  3 .stab         000006b4  00000000  00000000  000005c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000054  00000000  00000000  00000c74  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000060  00000000  00000000  00000cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000002af  00000000  00000000  00000d28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000004c5  00000000  00000000  00000fd7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000001a0  00000000  00000000  0000149c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000643  00000000  00000000  0000163c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000100  00000000  00000000  00001c80  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000289  00000000  00000000  00001d80  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000008e  00000000  00000000  00002009  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 cc 01 	jmp	0x398	; 0x398 <__vector_7>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 85 01 	jmp	0x30a	; 0x30a <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e2       	ldi	r30, 0x2A	; 42
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 31       	cpi	r26, 0x19	; 25
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 93 02 	jmp	0x526	; 0x526 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
uint16_t SvBDValue;			// the LSB bits (bits 9-0) will show which LEDs will be on (LEDs 10-1)
uint16_t SvTemp;

int main (void) {
	
	SvBDValue = 0;
  a6:	10 92 16 01 	sts	0x0116, r1
  aa:	10 92 15 01 	sts	0x0115, r1
	SvBDRow = 0;
  ae:	10 92 14 01 	sts	0x0114, r1
	
	sei();
  b2:	78 94       	sei
	Start_Timer2_RTC ();
  b4:	0e 94 b7 00 	call	0x16e	; 0x16e <Start_Timer2_RTC>
	Sf_Port_IO_init ();
  b8:	0e 94 18 02 	call	0x430	; 0x430 <Sf_Port_IO_init>
	
	SvTemp = SvSeconds;
  bc:	80 91 0f 01 	lds	r24, 0x010F
  c0:	90 91 10 01 	lds	r25, 0x0110
  c4:	90 93 18 01 	sts	0x0118, r25
  c8:	80 93 17 01 	sts	0x0117, r24
  cc:	20 91 15 01 	lds	r18, 0x0115
  d0:	30 91 16 01 	lds	r19, 0x0116
  d4:	40 91 17 01 	lds	r20, 0x0117
  d8:	50 91 18 01 	lds	r21, 0x0118
	
	while (1) {
		
		if (SvTemp != SvSeconds) {
  dc:	80 91 0f 01 	lds	r24, 0x010F
  e0:	90 91 10 01 	lds	r25, 0x0110
  e4:	48 17       	cp	r20, r24
  e6:	59 07       	cpc	r21, r25
  e8:	61 f0       	breq	.+24     	; 0x102 <main+0x5c>
			SvTemp = SvSeconds;
  ea:	40 91 0f 01 	lds	r20, 0x010F
  ee:	50 91 10 01 	lds	r21, 0x0110
			SvBDValue++;
  f2:	2f 5f       	subi	r18, 0xFF	; 255
  f4:	3f 4f       	sbci	r19, 0xFF	; 255
			if (SvBDValue > 0x3FFUL) {
  f6:	84 e0       	ldi	r24, 0x04	; 4
  f8:	20 30       	cpi	r18, 0x00	; 0
  fa:	38 07       	cpc	r19, r24
  fc:	10 f0       	brcs	.+4      	; 0x102 <main+0x5c>
  fe:	20 e0       	ldi	r18, 0x00	; 0
 100:	30 e0       	ldi	r19, 0x00	; 0
				SvBDValue = 0;
			}
		}
		
		if (SvDisplayTime > 25) {
 102:	80 91 11 01 	lds	r24, 0x0111
 106:	8a 31       	cpi	r24, 0x1A	; 26
 108:	48 f3       	brcs	.-46     	; 0xdc <main+0x36>
 10a:	20 93 15 01 	sts	0x0115, r18
 10e:	30 93 16 01 	sts	0x0116, r19
 112:	50 93 18 01 	sts	0x0118, r21
 116:	40 93 17 01 	sts	0x0117, r20
			SvDisplayTime -= 25;
 11a:	80 91 11 01 	lds	r24, 0x0111
 11e:	89 51       	subi	r24, 0x19	; 25
 120:	80 93 11 01 	sts	0x0111, r24
			if (SvBDRow > 2) {
 124:	80 91 14 01 	lds	r24, 0x0114
 128:	83 30       	cpi	r24, 0x03	; 3
 12a:	10 f0       	brcs	.+4      	; 0x130 <main+0x8a>
				SvBDRow = 0;
 12c:	10 92 14 01 	sts	0x0114, r1
			}
			Sf_Bar_Display (SvBDValue, SvBDRow);
 130:	60 91 14 01 	lds	r22, 0x0114
 134:	82 2f       	mov	r24, r18
 136:	70 e0       	ldi	r23, 0x00	; 0
 138:	0e 94 20 02 	call	0x440	; 0x440 <Sf_Bar_Display>
			SvBDRow++;
 13c:	80 91 14 01 	lds	r24, 0x0114
 140:	8f 5f       	subi	r24, 0xFF	; 255
 142:	80 93 14 01 	sts	0x0114, r24
 146:	c2 cf       	rjmp	.-124    	; 0xcc <main+0x26>

00000148 <Start_Timer0_RTC>:
	// 0.1mS (0.0001 Seconds) interrupt driven timer
	// count 250, clk/8 prescaler, with 20Mhz clock
	// sei();  *** need to put this in the main program - Enable global interrupts. ***
	// this was written using Dean Camera's tutorial "Newbie's Guide to AVR Timers" chapter 6
	
	SvTimer0_SetupStatus |= (1 << SvfTimer0_RTC_A);  // set flag to use RTC version of ISR TIMER0_COMPA_vect
 148:	80 91 04 01 	lds	r24, 0x0104
 14c:	80 68       	ori	r24, 0x80	; 128
 14e:	80 93 04 01 	sts	0x0104, r24
	TCCR0A |= (1 << WGM01);  // set timer 0 for CTC mode
 152:	84 b5       	in	r24, 0x24	; 36
 154:	82 60       	ori	r24, 0x02	; 2
 156:	84 bd       	out	0x24, r24	; 36
	TIMSK0 |= (1 << OCIE0A);  // Enable CTC interrupt
 158:	ee e6       	ldi	r30, 0x6E	; 110
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 81       	ld	r24, Z
 15e:	82 60       	ori	r24, 0x02	; 2
 160:	80 83       	st	Z, r24
	OCR0A = 249;  // set Output Compare Register A to 249 (count 0-249) ( CTC compare value )
 162:	89 ef       	ldi	r24, 0xF9	; 249
 164:	87 bd       	out	0x27, r24	; 39
	TCCR0B |= (1 << CS01);  // start timer with prescaler clk/8
 166:	85 b5       	in	r24, 0x25	; 37
 168:	82 60       	ori	r24, 0x02	; 2
 16a:	85 bd       	out	0x25, r24	; 37
}
 16c:	08 95       	ret

0000016e <Start_Timer2_RTC>:
	// 0.1mS (0.0001 Seconds) interrupt driven timer
	// count 250, clk/8 prescaler, with 20Mhz clock
	// sei();  *** need to put this in the main program - Enable global interrupts. ***
	// this was written using Dean Camera's tutorial "Newbie's Guide to AVR Timers" chapter 6
	
	SvTimer2_SetupStatus |= (1 << SvfTimer2_RTC_A);  // set flag to use RTC version of ISR TIMER2_COMPA_vect
 16e:	80 91 0c 01 	lds	r24, 0x010C
 172:	80 68       	ori	r24, 0x80	; 128
 174:	80 93 0c 01 	sts	0x010C, r24
	TCCR2A |= (1 << WGM21);  // set timer 0 for CTC mode
 178:	e0 eb       	ldi	r30, 0xB0	; 176
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	80 81       	ld	r24, Z
 17e:	82 60       	ori	r24, 0x02	; 2
 180:	80 83       	st	Z, r24
	TIMSK2 |= (1 << OCIE2A);  // Enable CTC interrupt
 182:	e0 e7       	ldi	r30, 0x70	; 112
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	80 81       	ld	r24, Z
 188:	82 60       	ori	r24, 0x02	; 2
 18a:	80 83       	st	Z, r24
	OCR2A = 249;  // set Output Compare Register A to 249 (count 0-249) ( CTC compare value )
 18c:	89 ef       	ldi	r24, 0xF9	; 249
 18e:	80 93 b3 00 	sts	0x00B3, r24
	TCCR2B |= (1 << CS21);  // start timer with prescaler clk/8
 192:	e1 eb       	ldi	r30, 0xB1	; 177
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	80 81       	ld	r24, Z
 198:	82 60       	ori	r24, 0x02	; 2
 19a:	80 83       	st	Z, r24
}
 19c:	08 95       	ret

0000019e <Start_Timer0_CTC>:

void Start_Timer0_CTC (uint8_t SvTimer0_SetupStatus, uint8_t SvTimer0_CompA, uint8_t SvTimer0_CompB) {
 19e:	98 2f       	mov	r25, r24
	// set Timer 0 and start it running with a chosen prescaler
	// sei();  *** if interrupts are being used, then need to put this in the main program - Enable global interrupts. ***
	// this was written using Dean Camera's tutorial "Newbie's Guide to AVR Timers" chapter 6

	TCCR0A |= (1 << WGM01);  // set timer 0 for CTC mode
 1a0:	84 b5       	in	r24, 0x24	; 36
 1a2:	82 60       	ori	r24, 0x02	; 2
 1a4:	84 bd       	out	0x24, r24	; 36
	if (SvTimer0_SetupStatus & (1 << SvfTimer0_SetINTA)) {  // test for interrupt setting A
 1a6:	95 ff       	sbrs	r25, 5
 1a8:	07 c0       	rjmp	.+14     	; 0x1b8 <Start_Timer0_CTC+0x1a>
		TIMSK0 |= (1 << OCIE0A);  // enable CTC interrupt A
 1aa:	80 91 6e 00 	lds	r24, 0x006E
 1ae:	82 60       	ori	r24, 0x02	; 2
 1b0:	80 93 6e 00 	sts	0x006E, r24
		SvTimer0_SetupStatus &= ~(1 << SvfTimer0_RTC_A);  // set flag to use NON-RTC version of ISR TIMER0_COMPA_vect
 1b4:	9f 77       	andi	r25, 0x7F	; 127
 1b6:	05 c0       	rjmp	.+10     	; 0x1c2 <Start_Timer0_CTC+0x24>
	}
	else {
		TIMSK0 &= ~(1 << OCIE0A);  // disable CTC interrupt A
 1b8:	80 91 6e 00 	lds	r24, 0x006E
 1bc:	8d 7f       	andi	r24, 0xFD	; 253
 1be:	80 93 6e 00 	sts	0x006E, r24
	}
	OCR0A = SvTimer0_CompA;  // set Output Compare Register A to SvTimer0_CompA ( CTC compare value )
 1c2:	67 bd       	out	0x27, r22	; 39
	if (SvTimer0_SetupStatus & (1 << SvfTimer0_SetINTB)) {  // test for interrupt setting B
 1c4:	29 2f       	mov	r18, r25
 1c6:	94 ff       	sbrs	r25, 4
 1c8:	04 c0       	rjmp	.+8      	; 0x1d2 <Start_Timer0_CTC+0x34>
		TIMSK0 |= (1 << OCIE0B);  // enable CTC interrupt B
 1ca:	80 91 6e 00 	lds	r24, 0x006E
 1ce:	84 60       	ori	r24, 0x04	; 4
 1d0:	03 c0       	rjmp	.+6      	; 0x1d8 <Start_Timer0_CTC+0x3a>
	}
	else {
		TIMSK0 &= ~(1 << OCIE0B);  // disable CTC interrupt B
 1d2:	80 91 6e 00 	lds	r24, 0x006E
 1d6:	8b 7f       	andi	r24, 0xFB	; 251
 1d8:	80 93 6e 00 	sts	0x006E, r24
	}
	OCR0B = SvTimer0_CompB;  // set Output Compare Register A to SvTimer0_CompB ( CTC compare value )
 1dc:	48 bd       	out	0x28, r20	; 40
	if (0 == (SvTimer0_SetupStatus & (1 << SvfTimer0_PrescalerNC))) {  // test for prescaler NC (no change) setting, if it's NOT 1 then go on to change prescaler
 1de:	23 fd       	sbrc	r18, 3
 1e0:	07 c0       	rjmp	.+14     	; 0x1f0 <Start_Timer0_CTC+0x52>
		TCCR0B &= ~(0x07);  // set bits 2:0 of TCCR0B to 0 (stop timer, disable clock)
 1e2:	85 b5       	in	r24, 0x25	; 37
 1e4:	88 7f       	andi	r24, 0xF8	; 248
 1e6:	85 bd       	out	0x25, r24	; 37
		TCCR0B |= (SvTimer0_SetupStatus & 0x07);  // set all three bits 2:0 of TCCR0B with bits 2:0 of SvTimer0_SetupStatus (all at once to start the timer in the correct mode)
 1e8:	85 b5       	in	r24, 0x25	; 37
 1ea:	97 70       	andi	r25, 0x07	; 7
 1ec:	89 2b       	or	r24, r25
 1ee:	85 bd       	out	0x25, r24	; 37
 1f0:	08 95       	ret

000001f2 <Start_Timer1_CTC>:
	}
}

void Start_Timer1_CTC (uint8_t SvTimer1_SetupStatus, uint16_t SvTimer1_CompA, uint16_t SvTimer1_CompB) {
 1f2:	28 2f       	mov	r18, r24
	// set Timer 1 and start it running with a chosen prescaler
	// sei();  *** if interrupts are being used, then need to put this in the main program - Enable global interrupts. ***
	// this was written using Dean Camera's tutorial "Newbie's Guide to AVR Timers" chapter 6

	TCCR1B |= (1 << WGM12);  // set timer 1 for CTC mode
 1f4:	80 91 81 00 	lds	r24, 0x0081
 1f8:	88 60       	ori	r24, 0x08	; 8
 1fa:	80 93 81 00 	sts	0x0081, r24
	if (SvTimer1_SetupStatus & (1 << SvfTimer1_SetINTA)) {  // test for interrupt setting A
 1fe:	92 2f       	mov	r25, r18
 200:	25 ff       	sbrs	r18, 5
 202:	04 c0       	rjmp	.+8      	; 0x20c <Start_Timer1_CTC+0x1a>
		TIMSK1 |= (1 << OCIE1A);  // enable CTC interrupt A
 204:	80 91 6f 00 	lds	r24, 0x006F
 208:	82 60       	ori	r24, 0x02	; 2
 20a:	03 c0       	rjmp	.+6      	; 0x212 <Start_Timer1_CTC+0x20>
	}
	else {
		TIMSK1 &= ~(1 << OCIE1A);  // disable CTC interrupt A
 20c:	80 91 6f 00 	lds	r24, 0x006F
 210:	8d 7f       	andi	r24, 0xFD	; 253
 212:	80 93 6f 00 	sts	0x006F, r24
	}
	OCR1A = SvTimer1_CompA;  // set Output Compare Register A to SvTimer1_CompA ( CTC compare value )
 216:	70 93 89 00 	sts	0x0089, r23
 21a:	60 93 88 00 	sts	0x0088, r22
	if (SvTimer1_SetupStatus & (1 << SvfTimer1_SetINTB)) {  // test for interrupt setting B
 21e:	94 ff       	sbrs	r25, 4
 220:	04 c0       	rjmp	.+8      	; 0x22a <Start_Timer1_CTC+0x38>
		TIMSK1 |= (1 << OCIE1B);  // enable CTC interrupt B
 222:	80 91 6f 00 	lds	r24, 0x006F
 226:	84 60       	ori	r24, 0x04	; 4
 228:	03 c0       	rjmp	.+6      	; 0x230 <Start_Timer1_CTC+0x3e>
	}
	else {
		TIMSK1 &= ~(1 << OCIE1B);  // disable CTC interrupt B
 22a:	80 91 6f 00 	lds	r24, 0x006F
 22e:	8b 7f       	andi	r24, 0xFB	; 251
 230:	80 93 6f 00 	sts	0x006F, r24
	}
	OCR1B = SvTimer1_CompB;  // set Output Compare Register A to SvTimer1_CompB ( CTC compare value )
 234:	50 93 8b 00 	sts	0x008B, r21
 238:	40 93 8a 00 	sts	0x008A, r20
	if (0 == (SvTimer1_SetupStatus & (1 << SvfTimer1_PrescalerNC))) {  // test for prescaler NC (no change) setting, if it's NOT 1 then go on to change prescaler
 23c:	93 fd       	sbrc	r25, 3
 23e:	0b c0       	rjmp	.+22     	; 0x256 <Start_Timer1_CTC+0x64>
		TCCR1B &= ~(0x07);  // set bits 2:0 of TCCR1B to 0 (stop timer, disable clock)
 240:	80 91 81 00 	lds	r24, 0x0081
 244:	88 7f       	andi	r24, 0xF8	; 248
 246:	80 93 81 00 	sts	0x0081, r24
		TCCR1B |= (SvTimer1_SetupStatus & 0x07);  // set all three bits 2:0 of TCCR1B with bits 2:0 of SvTimer1_SetupStatus (all at once to start the timer in the correct mode)
 24a:	80 91 81 00 	lds	r24, 0x0081
 24e:	27 70       	andi	r18, 0x07	; 7
 250:	82 2b       	or	r24, r18
 252:	80 93 81 00 	sts	0x0081, r24
 256:	08 95       	ret

00000258 <Start_Timer2_CTC>:
	}
}

void Start_Timer2_CTC (uint8_t SvTimer2_SetupStatus, uint8_t SvTimer2_CompA, uint8_t SvTimer2_CompB) {
 258:	98 2f       	mov	r25, r24
	// set Timer 2 and start it running with a chosen prescaler
	// sei();  *** if interrupts are being used, then need to put this in the main program - Enable global interrupts. ***
	// this was written using Dean Camera's tutorial "Newbie's Guide to AVR Timers" chapter 6

	TCCR2A |= (1 << WGM21);  // set timer 2 for CTC mode
 25a:	80 91 b0 00 	lds	r24, 0x00B0
 25e:	82 60       	ori	r24, 0x02	; 2
 260:	80 93 b0 00 	sts	0x00B0, r24
	if (SvTimer2_SetupStatus & (1 << SvfTimer2_SetINTA)) {  // test for interrupt setting A
 264:	95 ff       	sbrs	r25, 5
 266:	07 c0       	rjmp	.+14     	; 0x276 <Start_Timer2_CTC+0x1e>
		TIMSK2 |= (1 << OCIE2A);  // enable CTC interrupt A
 268:	80 91 70 00 	lds	r24, 0x0070
 26c:	82 60       	ori	r24, 0x02	; 2
 26e:	80 93 70 00 	sts	0x0070, r24
		SvTimer2_SetupStatus &= ~(1 << SvfTimer2_RTC_A);  // set flag to use NON-RTC version of ISR TIMER2_COMPA_vect
 272:	9f 77       	andi	r25, 0x7F	; 127
 274:	05 c0       	rjmp	.+10     	; 0x280 <Start_Timer2_CTC+0x28>
	}
	else {
		TIMSK2 &= ~(1 << OCIE2A);  // disable CTC interrupt A
 276:	80 91 70 00 	lds	r24, 0x0070
 27a:	8d 7f       	andi	r24, 0xFD	; 253
 27c:	80 93 70 00 	sts	0x0070, r24
	}
	OCR2A = SvTimer2_CompA;  // set Output Compare Register A to SvTimer2_CompA ( CTC compare value )
 280:	60 93 b3 00 	sts	0x00B3, r22
	if (SvTimer2_SetupStatus & (1 << SvfTimer2_SetINTB)) {  // test for interrupt setting B
 284:	29 2f       	mov	r18, r25
 286:	94 ff       	sbrs	r25, 4
 288:	04 c0       	rjmp	.+8      	; 0x292 <Start_Timer2_CTC+0x3a>
		TIMSK2 |= (1 << OCIE2B);  // enable CTC interrupt B
 28a:	80 91 70 00 	lds	r24, 0x0070
 28e:	84 60       	ori	r24, 0x04	; 4
 290:	03 c0       	rjmp	.+6      	; 0x298 <Start_Timer2_CTC+0x40>
	}
	else {
		TIMSK2 &= ~(1 << OCIE2B);  // disable CTC interrupt B
 292:	80 91 70 00 	lds	r24, 0x0070
 296:	8b 7f       	andi	r24, 0xFB	; 251
 298:	80 93 70 00 	sts	0x0070, r24
	}
	OCR2B = SvTimer2_CompB;  // set Output Compare Register A to SvTimer2_CompB ( CTC compare value )
 29c:	40 93 b4 00 	sts	0x00B4, r20
	if (0 == (SvTimer2_SetupStatus & (1 << SvfTimer2_PrescalerNC))) {  // test for prescaler NC (no change) setting, if it's NOT 1 then go on to change prescaler
 2a0:	23 fd       	sbrc	r18, 3
 2a2:	0b c0       	rjmp	.+22     	; 0x2ba <Start_Timer2_CTC+0x62>
		TCCR2B &= ~(0x07);  // set bits 2:2 of TCCR2B to 0 (stop timer, disable clock)
 2a4:	80 91 b1 00 	lds	r24, 0x00B1
 2a8:	88 7f       	andi	r24, 0xF8	; 248
 2aa:	80 93 b1 00 	sts	0x00B1, r24
		TCCR2B |= (SvTimer2_SetupStatus & 0x07);  // set all three bits 2:0 of TCCR2B with bits 2:0 of SvTimer2_SetupStatus (all at once to start the timer in the correct mode)
 2ae:	80 91 b1 00 	lds	r24, 0x00B1
 2b2:	97 70       	andi	r25, 0x07	; 7
 2b4:	89 2b       	or	r24, r25
 2b6:	80 93 b1 00 	sts	0x00B1, r24
 2ba:	08 95       	ret

000002bc <Timer0_Reset_to_Startup>:
void Timer0_Reset_to_Startup () {
	// Reset Timer0 registers to Startup
	// Clear previous Timer settings
	// sei - may need to be turned off in the main program

	SvTimer0_SetupStatus = 0;
 2bc:	10 92 04 01 	sts	0x0104, r1
	TCCR0A = 0;
 2c0:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0;
 2c2:	15 bc       	out	0x25, r1	; 37
	OCR0A = 0;
 2c4:	17 bc       	out	0x27, r1	; 39
	OCR0B = 0;
 2c6:	18 bc       	out	0x28, r1	; 40
	TIMSK0 = 0;
 2c8:	10 92 6e 00 	sts	0x006E, r1
}
 2cc:	08 95       	ret

000002ce <Timer1_Reset_to_Startup>:
void Timer1_Reset_to_Startup () {
	// Reset Timer1 registers to Startup
	// Clear previous Timer settings
	// sei - may need to be turned off in the main program

	TCCR1A = 0;
 2ce:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0;
 2d2:	10 92 81 00 	sts	0x0081, r1
	TCCR1C = 0;
 2d6:	10 92 82 00 	sts	0x0082, r1
	OCR1A = 0;
 2da:	10 92 89 00 	sts	0x0089, r1
 2de:	10 92 88 00 	sts	0x0088, r1
	OCR1B = 0;
 2e2:	10 92 8b 00 	sts	0x008B, r1
 2e6:	10 92 8a 00 	sts	0x008A, r1
	TIMSK1 = 0;
 2ea:	10 92 6f 00 	sts	0x006F, r1
}
 2ee:	08 95       	ret

000002f0 <Timer2_Reset_to_Startup>:
void Timer2_Reset_to_Startup () {
	// Reset Timer2 registers to Startup
	// Clear previous Timer settings
	// sei - may need to be turned off in the main program

	SvTimer2_SetupStatus = 0;
 2f0:	10 92 0c 01 	sts	0x010C, r1
	TCCR2A = 0;
 2f4:	10 92 b0 00 	sts	0x00B0, r1
	TCCR2B = 0;
 2f8:	10 92 b1 00 	sts	0x00B1, r1
	OCR2A = 0;
 2fc:	10 92 b3 00 	sts	0x00B3, r1
	OCR2B = 0;
 300:	10 92 b4 00 	sts	0x00B4, r1
	TIMSK2 = 0;
 304:	10 92 70 00 	sts	0x0070, r1
	// ASSR rest?
	// GTCCR reset ?
}
 308:	08 95       	ret

0000030a <__vector_14>:

ISR(TIMER0_COMPA_vect) {
 30a:	1f 92       	push	r1
 30c:	0f 92       	push	r0
 30e:	0f b6       	in	r0, 0x3f	; 63
 310:	0f 92       	push	r0
 312:	11 24       	eor	r1, r1
 314:	2f 93       	push	r18
 316:	8f 93       	push	r24
 318:	9f 93       	push	r25
	// RTC version and NON-RTC versions
	
	if (SvTimer0_SetupStatus & (1 << SvfTimer0_RTC_A)) {  // test if the flag is set to use the RTC version of ISR TIMER0_COMPA_vect
 31a:	80 91 04 01 	lds	r24, 0x0104
 31e:	87 ff       	sbrs	r24, 7
 320:	33 c0       	rjmp	.+102    	; 0x388 <__vector_14+0x7e>
		// use this with the Real Time Clock - Start_Timer0_RTC function
		// count every 0.1mS (0.0001 Seconds)
		
		SvTenThousandths++ ;
 322:	80 91 0d 01 	lds	r24, 0x010D
 326:	8f 5f       	subi	r24, 0xFF	; 255
 328:	80 93 0d 01 	sts	0x010D, r24
		// anything that would need to happen each 0.0001 seconds should go here
		// but it should be something pretty brief
		if (SvTenThousandths > 99) {  // count 0-99 ten-thousandths in a hundredth
 32c:	80 91 0d 01 	lds	r24, 0x010D
 330:	84 36       	cpi	r24, 0x64	; 100
 332:	50 f1       	brcs	.+84     	; 0x388 <__vector_14+0x7e>
			SvTenThousandths = 0 ;
 334:	10 92 0d 01 	sts	0x010D, r1
			SvHundredths++ ;
 338:	80 91 0e 01 	lds	r24, 0x010E
 33c:	8f 5f       	subi	r24, 0xFF	; 255
 33e:	80 93 0e 01 	sts	0x010E, r24
			// anything that would need to happen each 0.01 seconds should go here
			if (SvHundredths > 99) {  // count 0-99 hundredths in a second
 342:	80 91 0e 01 	lds	r24, 0x010E
 346:	84 36       	cpi	r24, 0x64	; 100
 348:	f8 f0       	brcs	.+62     	; 0x388 <__vector_14+0x7e>
				SvHundredths = 0 ;
 34a:	10 92 0e 01 	sts	0x010E, r1
				SvSeconds++ ;
 34e:	80 91 0f 01 	lds	r24, 0x010F
 352:	90 91 10 01 	lds	r25, 0x0110
 356:	01 96       	adiw	r24, 0x01	; 1
 358:	90 93 10 01 	sts	0x0110, r25
 35c:	80 93 0f 01 	sts	0x010F, r24
				// anything that would need to happen each second should go here
				if (SvSeconds > 43199) {  // count 0-43,199 seconds (12 hours)
 360:	80 91 0f 01 	lds	r24, 0x010F
 364:	90 91 10 01 	lds	r25, 0x0110
 368:	80 5c       	subi	r24, 0xC0	; 192
 36a:	98 4a       	sbci	r25, 0xA8	; 168
 36c:	68 f0       	brcs	.+26     	; 0x388 <__vector_14+0x7e>
					SvSeconds = 0 ;
 36e:	10 92 10 01 	sts	0x0110, r1
 372:	10 92 0f 01 	sts	0x010F, r1
					SvHalfDays++ ;
 376:	80 91 00 01 	lds	r24, 0x0100
 37a:	90 91 01 01 	lds	r25, 0x0101
 37e:	01 96       	adiw	r24, 0x01	; 1
 380:	90 93 01 01 	sts	0x0101, r25
 384:	80 93 00 01 	sts	0x0100, r24
		}
	}
	else {
		//  put NON-RTC version of ISR here
	}
}
 388:	9f 91       	pop	r25
 38a:	8f 91       	pop	r24
 38c:	2f 91       	pop	r18
 38e:	0f 90       	pop	r0
 390:	0f be       	out	0x3f, r0	; 63
 392:	0f 90       	pop	r0
 394:	1f 90       	pop	r1
 396:	18 95       	reti

00000398 <__vector_7>:

ISR(TIMER2_COMPA_vect) {
 398:	1f 92       	push	r1
 39a:	0f 92       	push	r0
 39c:	0f b6       	in	r0, 0x3f	; 63
 39e:	0f 92       	push	r0
 3a0:	11 24       	eor	r1, r1
 3a2:	2f 93       	push	r18
 3a4:	8f 93       	push	r24
 3a6:	9f 93       	push	r25
	// RTC version and NON-RTC versions
	
	if (SvTimer2_SetupStatus & (1 << SvfTimer2_RTC_A)) {  // test if the flag is set to use the RTC version of ISR TIMER2_COMPA_vect
 3a8:	80 91 0c 01 	lds	r24, 0x010C
 3ac:	87 ff       	sbrs	r24, 7
 3ae:	38 c0       	rjmp	.+112    	; 0x420 <__vector_7+0x88>
		// use this with the Real Time Clock - Start_Timer2_RTC function
		// count every 0.1mS (0.0001 Seconds)
		
		SvTenThousandths++ ;
 3b0:	80 91 0d 01 	lds	r24, 0x010D
 3b4:	8f 5f       	subi	r24, 0xFF	; 255
 3b6:	80 93 0d 01 	sts	0x010D, r24
		// anything that would need to happen each 0.0001 seconds should go here
		// but it should be something pretty brief
		SvDisplayTime++;  // this is the counter for when to make it to the next row of the display
 3ba:	80 91 11 01 	lds	r24, 0x0111
 3be:	8f 5f       	subi	r24, 0xFF	; 255
 3c0:	80 93 11 01 	sts	0x0111, r24
		if (SvTenThousandths > 99) {  // count 0-99 ten-thousandths in a hundredth
 3c4:	80 91 0d 01 	lds	r24, 0x010D
 3c8:	84 36       	cpi	r24, 0x64	; 100
 3ca:	50 f1       	brcs	.+84     	; 0x420 <__vector_7+0x88>
			SvTenThousandths = 0 ;
 3cc:	10 92 0d 01 	sts	0x010D, r1
			SvHundredths++ ;
 3d0:	80 91 0e 01 	lds	r24, 0x010E
 3d4:	8f 5f       	subi	r24, 0xFF	; 255
 3d6:	80 93 0e 01 	sts	0x010E, r24
			// anything that would need to happen each 0.01 seconds should go here
			if (SvHundredths > 99) {  // count 0-99 hundredths in a second
 3da:	80 91 0e 01 	lds	r24, 0x010E
 3de:	84 36       	cpi	r24, 0x64	; 100
 3e0:	f8 f0       	brcs	.+62     	; 0x420 <__vector_7+0x88>
				SvHundredths = 0 ;
 3e2:	10 92 0e 01 	sts	0x010E, r1
				SvSeconds++ ;
 3e6:	80 91 0f 01 	lds	r24, 0x010F
 3ea:	90 91 10 01 	lds	r25, 0x0110
 3ee:	01 96       	adiw	r24, 0x01	; 1
 3f0:	90 93 10 01 	sts	0x0110, r25
 3f4:	80 93 0f 01 	sts	0x010F, r24
				// anything that would need to happen each second should go here
				if (SvSeconds > 43199) {  // count 0-43,199 seconds (12 hours)
 3f8:	80 91 0f 01 	lds	r24, 0x010F
 3fc:	90 91 10 01 	lds	r25, 0x0110
 400:	80 5c       	subi	r24, 0xC0	; 192
 402:	98 4a       	sbci	r25, 0xA8	; 168
 404:	68 f0       	brcs	.+26     	; 0x420 <__vector_7+0x88>
					SvSeconds = 0 ;
 406:	10 92 10 01 	sts	0x0110, r1
 40a:	10 92 0f 01 	sts	0x010F, r1
					SvHalfDays++ ;
 40e:	80 91 00 01 	lds	r24, 0x0100
 412:	90 91 01 01 	lds	r25, 0x0101
 416:	01 96       	adiw	r24, 0x01	; 1
 418:	90 93 01 01 	sts	0x0101, r25
 41c:	80 93 00 01 	sts	0x0100, r24
		}
	}
	else {
		// put NON-RTC version of ISR here
	}
}
 420:	9f 91       	pop	r25
 422:	8f 91       	pop	r24
 424:	2f 91       	pop	r18
 426:	0f 90       	pop	r0
 428:	0f be       	out	0x3f, r0	; 63
 42a:	0f 90       	pop	r0
 42c:	1f 90       	pop	r1
 42e:	18 95       	reti

00000430 <Sf_Port_IO_init>:
uint16_t SvBDValue = 0;

void Sf_Port_IO_init () {
						// clock fuse bits set PB7 and PB6 to be XTAL2 and XTAL1
						// the programmer uses PB5, PB6 and PB7 as SCK, MISO and MOSI
	DDRB = 0b00000001; 	// XTAL2, XTAL1, SCK, MISO, MOSI, INPUT, INPUT, OUTPUT
 430:	81 e0       	ldi	r24, 0x01	; 1
 432:	84 b9       	out	0x04, r24	; 4
						// PC7 is not a pin, the programmer uses PC6 as RESET
	DDRC = 0b00000000; 	// N/A, RESET, INPUT, INPUT, INPUT, INPUT, INPUT, INPUT
 434:	17 b8       	out	0x07, r1	; 7
						// turning on RXEN0 and TXEN0 in the UCR0B register makes PD1 TXD and PD0 RXD
	DDRD = 0b11111100; 	// OUTPUT, OUTPUT, OUTPUT, OUTPUT, OUTPUT, OUTPUT, TRANSMIT, RECEIVE
 436:	8c ef       	ldi	r24, 0xFC	; 252
 438:	8a b9       	out	0x0a, r24	; 10
	
	PORTB = 0;
 43a:	15 b8       	out	0x05, r1	; 5
	PORTD = 0;
 43c:	1b b8       	out	0x0b, r1	; 11
}
 43e:	08 95       	ret

00000440 <Sf_Bar_Display>:
void Sf_Bar_Display (uint8_t SvBDValue, uint16_t SvBDRow) {
	   
	LED_PortD |= 0b00011100; // turn all rows off, set PD4, PD3 and PD2 to 1, bitwise or
		   
													// row 1 left shift 2, row 2 left shift 3, row 3 left shift 4
	LED_PortD &= ~(1 << (2 + SvBDRow) ); // set Port pin for the current row to 0, bitwise and (with bitwise negation ~)
 440:	6e 5f       	subi	r22, 0xFE	; 254
 442:	7f 4f       	sbci	r23, 0xFF	; 255
 444:	21 e0       	ldi	r18, 0x01	; 1
 446:	30 e0       	ldi	r19, 0x00	; 0
 448:	a9 01       	movw	r20, r18
 44a:	06 2e       	mov	r0, r22
 44c:	02 c0       	rjmp	.+4      	; 0x452 <Sf_Bar_Display+0x12>
 44e:	44 0f       	add	r20, r20
 450:	55 1f       	adc	r21, r21
 452:	0a 94       	dec	r0
 454:	e2 f7       	brpl	.-8      	; 0x44e <Sf_Bar_Display+0xe>
 456:	62 50       	subi	r22, 0x02	; 2
 458:	70 40       	sbci	r23, 0x00	; 0
 45a:	40 95       	com	r20
 45c:	90 91 13 01 	lds	r25, 0x0113
 460:	9c 61       	ori	r25, 0x1C	; 28
 462:	49 23       	and	r20, r25
		   
	// copy out four bits for the columns in this current row, from SvBDValue to LED_PortD for the column data
	if ( (SvBDValue & (1 << ( (SvBDRow * 4) + 0 ) ) ) > 0){
 464:	a8 2f       	mov	r26, r24
 466:	b0 e0       	ldi	r27, 0x00	; 0
 468:	fb 01       	movw	r30, r22
 46a:	ee 0f       	add	r30, r30
 46c:	ff 1f       	adc	r31, r31
 46e:	ee 0f       	add	r30, r30
 470:	ff 1f       	adc	r31, r31
 472:	0e 2e       	mov	r0, r30
 474:	02 c0       	rjmp	.+4      	; 0x47a <Sf_Bar_Display+0x3a>
 476:	22 0f       	add	r18, r18
 478:	33 1f       	adc	r19, r19
 47a:	0a 94       	dec	r0
 47c:	e2 f7       	brpl	.-8      	; 0x476 <Sf_Bar_Display+0x36>
 47e:	2a 23       	and	r18, r26
 480:	3b 23       	and	r19, r27
 482:	12 16       	cp	r1, r18
 484:	13 06       	cpc	r1, r19
 486:	14 f4       	brge	.+4      	; 0x48c <Sf_Bar_Display+0x4c>
		LED_PortD |= ( 1 << 5); // set column 1 bit to 1 (PORTD left shift 5 for PD5), if it is 1 in SvBDValue
 488:	40 62       	ori	r20, 0x20	; 32
 48a:	01 c0       	rjmp	.+2      	; 0x48e <Sf_Bar_Display+0x4e>
	}
	else {
		LED_PortD &= ~( 1 << 5); // set column 1 bit to 0 (PORTD left shift 5 for PD5), if it is 0 in SvBDValue
 48c:	4f 7d       	andi	r20, 0xDF	; 223
 48e:	40 93 13 01 	sts	0x0113, r20
	}
		   
	if ( (SvBDValue & (1 << ( (SvBDRow * 4) + 1 ) ) ) > 0){
 492:	31 96       	adiw	r30, 0x01	; 1
 494:	81 e0       	ldi	r24, 0x01	; 1
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	0e 2e       	mov	r0, r30
 49a:	02 c0       	rjmp	.+4      	; 0x4a0 <Sf_Bar_Display+0x60>
 49c:	88 0f       	add	r24, r24
 49e:	99 1f       	adc	r25, r25
 4a0:	0a 94       	dec	r0
 4a2:	e2 f7       	brpl	.-8      	; 0x49c <Sf_Bar_Display+0x5c>
 4a4:	31 97       	sbiw	r30, 0x01	; 1
 4a6:	8a 23       	and	r24, r26
 4a8:	9b 23       	and	r25, r27
 4aa:	20 91 13 01 	lds	r18, 0x0113
 4ae:	18 16       	cp	r1, r24
 4b0:	19 06       	cpc	r1, r25
 4b2:	14 f4       	brge	.+4      	; 0x4b8 <Sf_Bar_Display+0x78>
		LED_PortD |= ( 1 << 6); // set column 2 bit to 1 (PORTD left shift 6 for PD6), if it is 1 in SvBDValue
 4b4:	20 64       	ori	r18, 0x40	; 64
 4b6:	01 c0       	rjmp	.+2      	; 0x4ba <Sf_Bar_Display+0x7a>
	}
	else {
		LED_PortD &= ~( 1 << 6); // set column 2 bit to 0 (PORTD left shift 6 for PD6), if it is 0 in SvBDValue
 4b8:	2f 7b       	andi	r18, 0xBF	; 191
 4ba:	20 93 13 01 	sts	0x0113, r18
	}
		   
	if ( (SvBDValue & (1 << ( (SvBDRow * 4) + 2 ) ) ) > 0){
 4be:	66 0f       	add	r22, r22
 4c0:	77 1f       	adc	r23, r23
 4c2:	66 0f       	add	r22, r22
 4c4:	77 1f       	adc	r23, r23
 4c6:	6e 5f       	subi	r22, 0xFE	; 254
 4c8:	7f 4f       	sbci	r23, 0xFF	; 255
 4ca:	81 e0       	ldi	r24, 0x01	; 1
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	02 c0       	rjmp	.+4      	; 0x4d4 <Sf_Bar_Display+0x94>
 4d0:	88 0f       	add	r24, r24
 4d2:	99 1f       	adc	r25, r25
 4d4:	6a 95       	dec	r22
 4d6:	e2 f7       	brpl	.-8      	; 0x4d0 <Sf_Bar_Display+0x90>
 4d8:	8a 23       	and	r24, r26
 4da:	9b 23       	and	r25, r27
 4dc:	20 91 13 01 	lds	r18, 0x0113
 4e0:	18 16       	cp	r1, r24
 4e2:	19 06       	cpc	r1, r25
 4e4:	14 f4       	brge	.+4      	; 0x4ea <Sf_Bar_Display+0xaa>
		LED_PortD |= ( 1 << 7); // set column 3 bit to 1 (PORTD left shift 7 for PD7), if it is 1 in SvBDValue
 4e6:	20 68       	ori	r18, 0x80	; 128
 4e8:	01 c0       	rjmp	.+2      	; 0x4ec <Sf_Bar_Display+0xac>
	}
	else {
		LED_PortD &= ~( 1 << 7); // set column 3 bit to 0 (PORTD left shift 7 for PD7), if it is 0 in SvBDValue
 4ea:	2f 77       	andi	r18, 0x7F	; 127
 4ec:	20 93 13 01 	sts	0x0113, r18
	}
		   
	if ( (SvBDValue & (1 << ( (SvBDRow * 4) + 3 ) ) ) > 0){
 4f0:	33 96       	adiw	r30, 0x03	; 3
 4f2:	81 e0       	ldi	r24, 0x01	; 1
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	02 c0       	rjmp	.+4      	; 0x4fc <Sf_Bar_Display+0xbc>
 4f8:	88 0f       	add	r24, r24
 4fa:	99 1f       	adc	r25, r25
 4fc:	ea 95       	dec	r30
 4fe:	e2 f7       	brpl	.-8      	; 0x4f8 <Sf_Bar_Display+0xb8>
 500:	8a 23       	and	r24, r26
 502:	9b 23       	and	r25, r27
 504:	20 91 12 01 	lds	r18, 0x0112
 508:	18 16       	cp	r1, r24
 50a:	19 06       	cpc	r1, r25
 50c:	14 f4       	brge	.+4      	; 0x512 <Sf_Bar_Display+0xd2>
		LED_PortB |= ( 1 << 0); // set column 4 bit to 1 (PORTB left shift 0 for PB0), if it is 1 in SvBDValue
 50e:	21 60       	ori	r18, 0x01	; 1
 510:	01 c0       	rjmp	.+2      	; 0x514 <Sf_Bar_Display+0xd4>
	}
	else {
		LED_PortB &= ~( 1 << 0); // set column 4 bit to 0 (PORTB left shift 0 for PB0), if it is 0 in SvBDValue
 512:	2e 7f       	andi	r18, 0xFE	; 254
 514:	20 93 12 01 	sts	0x0112, r18
	}
		   
	PORTB = LED_PortB;
 518:	80 91 12 01 	lds	r24, 0x0112
 51c:	85 b9       	out	0x05, r24	; 5
	PORTD = LED_PortD;
 51e:	80 91 13 01 	lds	r24, 0x0113
 522:	8b b9       	out	0x0b, r24	; 11

}
 524:	08 95       	ret

00000526 <_exit>:
 526:	f8 94       	cli

00000528 <__stop_program>:
 528:	ff cf       	rjmp	.-2      	; 0x528 <__stop_program>
