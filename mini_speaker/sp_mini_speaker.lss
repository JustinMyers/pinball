
sp_mini_speaker.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000384  00800100  000005cc  00000660  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000031  00800484  00800484  000009e4  2**0
                  ALLOC
  3 .stab         000006b4  00000000  00000000  000009e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000054  00000000  00000000  00001098  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  000010ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000211  00000000  00000000  0000110c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000366  00000000  00000000  0000131d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000000f8  00000000  00000000  00001683  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000003f2  00000000  00000000  0000177b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000050  00000000  00000000  00001b70  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000029e  00000000  00000000  00001bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000008a  00000000  00000000  00001e5e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 05 02 	jmp	0x40a	; 0x40a <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	14 e0       	ldi	r17, 0x04	; 4
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ec       	ldi	r30, 0xCC	; 204
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a4 38       	cpi	r26, 0x84	; 132
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	14 e0       	ldi	r17, 0x04	; 4
  8c:	a4 e8       	ldi	r26, 0x84	; 132
  8e:	b4 e0       	ldi	r27, 0x04	; 4
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 3b       	cpi	r26, 0xB5	; 181
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <main>
  9e:	0c 94 e4 02 	jmp	0x5c8	; 0x5c8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SfToneGenerator>:
			else SvNoteStructNum++;
		}
	}
}

void SfToneGenerator (struct NoteStruct SvNoteForPlayArray) {
  a6:	af 92       	push	r10
  a8:	bf 92       	push	r11
  aa:	cf 92       	push	r12
  ac:	df 92       	push	r13
  ae:	ff 92       	push	r15
  b0:	0f 93       	push	r16
  b2:	1f 93       	push	r17
  b4:	cf 93       	push	r28
  b6:	df 93       	push	r29
  b8:	6c 01       	movw	r12, r24
	uint16_t temp1;
	uint8_t temp2;
	uint16_t temp3;
	uint8_t temp4;
	
	SvStartCalculatingNextNote = 0;  // calculating the next note SvPlayArray is started
  ba:	10 92 b4 04 	sts	0x04B4, r1
	SvArrNoteDuration[SvNextLiveArr] = SvNoteForPlayArray.SvNoteDuration;  // currently going to set up the NON live array
  be:	e0 91 ad 04 	lds	r30, 0x04AD
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	e2 58       	subi	r30, 0x82	; 130
  c6:	fb 4f       	sbci	r31, 0xFB	; 251
  c8:	70 83       	st	Z, r23
	
	if (SvNoteForPlayArray.SvNoteNum < 48) {  // low note version, notes 0-47.
  ca:	60 33       	cpi	r22, 0x30	; 48
  cc:	08 f0       	brcs	.+2      	; 0xd0 <SfToneGenerator+0x2a>
  ce:	62 c0       	rjmp	.+196    	; 0x194 <SfToneGenerator+0xee>
		//step one or more (2, 4, 8, or 16) 78K step(s) along the one sine wave in SvPlayArray[] 
		
		SvNoteHighNOTLow[SvNextLiveArr] = 0;  // set to false, this is a low note, not a high note
  d0:	e0 91 ad 04 	lds	r30, 0x04AD
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	e4 58       	subi	r30, 0x84	; 132
  d8:	fb 4f       	sbci	r31, 0xFB	; 251
  da:	10 82       	st	Z, r1
		SvNoteFactor[SvNextLiveArr] = ( 59 - SvNoteForPlayArray.SvNoteNum ) / 12;  // (1 << SvNoteFactor[]) is the number of 78K steps per entry in SvPlayArray[] (count by (1 << SvNoteFactor[]) when playing back
  dc:	e0 91 ad 04 	lds	r30, 0x04AD
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	26 2f       	mov	r18, r22
  e4:	30 e0       	ldi	r19, 0x00	; 0
  e6:	8b e3       	ldi	r24, 0x3B	; 59
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	82 1b       	sub	r24, r18
  ec:	93 0b       	sbc	r25, r19
  ee:	6c e0       	ldi	r22, 0x0C	; 12
  f0:	70 e0       	ldi	r23, 0x00	; 0
  f2:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <__divmodhi4>
  f6:	ec 57       	subi	r30, 0x7C	; 124
  f8:	fb 4f       	sbci	r31, 0xFB	; 251
  fa:	60 83       	st	Z, r22
		SvArrayElements[SvNextLiveArr] = SvNoteWaveLength78K[SvNoteForPlayArray.SvNoteNum];
  fc:	e0 91 ad 04 	lds	r30, 0x04AD
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	20 50       	subi	r18, 0x00	; 0
 104:	3f 4f       	sbci	r19, 0xFF	; 255
 106:	d9 01       	movw	r26, r18
 108:	8c 91       	ld	r24, X
 10a:	e6 58       	subi	r30, 0x86	; 134
 10c:	fb 4f       	sbci	r31, 0xFB	; 251
 10e:	80 83       	st	Z, r24
		for ( SvArrayCount = 0; SvArrayCount <= SvArrayElements[SvNextLiveArr]; SvArrayCount++ ) {
 110:	e0 91 ad 04 	lds	r30, 0x04AD
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	e6 58       	subi	r30, 0x86	; 134
 118:	fb 4f       	sbci	r31, 0xFB	; 251
 11a:	e0 81       	ld	r30, Z
 11c:	00 e0       	ldi	r16, 0x00	; 0
 11e:	10 e0       	ldi	r17, 0x00	; 0
			temp1 = SvArrayCount << 8;  // temp1 is 16 bit, need 16 bit result
			SvPlayArray[SvNextLiveArr][SvArrayCount] = ( SvSineWaveLookup256[ temp1 / ( SvArrayElements[SvNextLiveArr] + 1 ) ] * SvNoteForPlayArray.SvNoteVolume ) >> 8;
 120:	20 91 ad 04 	lds	r18, 0x04AD
 124:	e0 91 ad 04 	lds	r30, 0x04AD
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	e6 58       	subi	r30, 0x86	; 134
 12c:	fb 4f       	sbci	r31, 0xFB	; 251
 12e:	60 81       	ld	r22, Z
 130:	70 e0       	ldi	r23, 0x00	; 0
 132:	6f 5f       	subi	r22, 0xFF	; 255
 134:	7f 4f       	sbci	r23, 0xFF	; 255
 136:	80 e0       	ldi	r24, 0x00	; 0
 138:	90 2f       	mov	r25, r16
 13a:	0e 94 bd 02 	call	0x57a	; 0x57a <__udivmodhi4>
 13e:	fb 01       	movw	r30, r22
 140:	e6 58       	subi	r30, 0x86	; 134
 142:	fe 4f       	sbci	r31, 0xFE	; 254
 144:	80 81       	ld	r24, Z
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	ac 01       	movw	r20, r24
 14a:	4c 9d       	mul	r20, r12
 14c:	c0 01       	movw	r24, r0
 14e:	4d 9d       	mul	r20, r13
 150:	90 0d       	add	r25, r0
 152:	5c 9d       	mul	r21, r12
 154:	90 0d       	add	r25, r0
 156:	11 24       	eor	r1, r1
 158:	32 2f       	mov	r19, r18
 15a:	20 e0       	ldi	r18, 0x00	; 0
 15c:	f9 01       	movw	r30, r18
 15e:	e0 0f       	add	r30, r16
 160:	f1 1f       	adc	r31, r17
 162:	e6 58       	subi	r30, 0x86	; 134
 164:	fd 4f       	sbci	r31, 0xFD	; 253
 166:	90 83       	st	Z, r25
		//step one or more (2, 4, 8, or 16) 78K step(s) along the one sine wave in SvPlayArray[] 
		
		SvNoteHighNOTLow[SvNextLiveArr] = 0;  // set to false, this is a low note, not a high note
		SvNoteFactor[SvNextLiveArr] = ( 59 - SvNoteForPlayArray.SvNoteNum ) / 12;  // (1 << SvNoteFactor[]) is the number of 78K steps per entry in SvPlayArray[] (count by (1 << SvNoteFactor[]) when playing back
		SvArrayElements[SvNextLiveArr] = SvNoteWaveLength78K[SvNoteForPlayArray.SvNoteNum];
		for ( SvArrayCount = 0; SvArrayCount <= SvArrayElements[SvNextLiveArr]; SvArrayCount++ ) {
 168:	0f 5f       	subi	r16, 0xFF	; 255
 16a:	1f 4f       	sbci	r17, 0xFF	; 255
 16c:	e0 91 ad 04 	lds	r30, 0x04AD
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	e6 58       	subi	r30, 0x86	; 134
 174:	fb 4f       	sbci	r31, 0xFB	; 251
 176:	80 81       	ld	r24, Z
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	80 17       	cp	r24, r16
 17c:	91 07       	cpc	r25, r17
 17e:	80 f6       	brcc	.-96     	; 0x120 <SfToneGenerator+0x7a>
			temp4 = ( temp3 / ( SvArrayElements[SvNextLiveArr] + 1 ) ) << ( 8 - SvNoteFactor[SvNextLiveArr] );  // temp4 is intermediate result to make the equation shorter
			SvPlayArray[SvNextLiveArr][SvArrayCount] = (SvSineWaveLookup256[ (temp2 - temp4) << SvNoteFactor[SvNextLiveArr] ] * SvNoteForPlayArray.SvNoteVolume) >> 8;
			//SvPlayArray[SvNextLiveArr][SvArrayCount] = (SvSineWaveLookup256[ (((SvArrayCount << 8) / SvArrayElements[SvNextLiveArr]) - (((SvArrayCount * SvCyclesTotal) / SvArrayElements[SvNextLiveArr]) << (8 - SvNoteFactor[SvNextLiveArr]))) * SvCyclesTotal] * SvNoteForPlayArray.SvNoteVolume) >> 8;
		}
	}
}
 180:	df 91       	pop	r29
 182:	cf 91       	pop	r28
 184:	1f 91       	pop	r17
 186:	0f 91       	pop	r16
 188:	ff 90       	pop	r15
 18a:	df 90       	pop	r13
 18c:	cf 90       	pop	r12
 18e:	bf 90       	pop	r11
 190:	af 90       	pop	r10
 192:	08 95       	ret
		}
	}
	else {  // SvNoteNum >= 48, high note version.  notes 48-121.
		//step one 78K steps along the two or more (2, 4, 8, 16, 32 or 64) sine waves in SvPlayArray[] 
		
		SvNoteHighNOTLow[SvNextLiveArr] = 1;  // set to true, this is a high note, not a low note
 194:	e0 91 ad 04 	lds	r30, 0x04AD
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	e4 58       	subi	r30, 0x84	; 132
 19c:	fb 4f       	sbci	r31, 0xFB	; 251
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	80 83       	st	Z, r24
		SvNoteFactor[SvNextLiveArr] = ( (SvNoteForPlayArray.SvNoteNum - 48) / 12 );  // (1 << SvNoteFactor) is number of Sine Wave Cycles in the SvPlayArray
 1a2:	e0 91 ad 04 	lds	r30, 0x04AD
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	26 2f       	mov	r18, r22
 1aa:	30 e0       	ldi	r19, 0x00	; 0
 1ac:	c9 01       	movw	r24, r18
 1ae:	c0 97       	sbiw	r24, 0x30	; 48
 1b0:	6c e0       	ldi	r22, 0x0C	; 12
 1b2:	70 e0       	ldi	r23, 0x00	; 0
 1b4:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <__divmodhi4>
 1b8:	ec 57       	subi	r30, 0x7C	; 124
 1ba:	fb 4f       	sbci	r31, 0xFB	; 251
 1bc:	60 83       	st	Z, r22
		SvArrayElements[SvNextLiveArr] = SvNoteWaveLength78K[SvNoteForPlayArray.SvNoteNum];
 1be:	e0 91 ad 04 	lds	r30, 0x04AD
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	20 50       	subi	r18, 0x00	; 0
 1c6:	3f 4f       	sbci	r19, 0xFF	; 255
 1c8:	d9 01       	movw	r26, r18
 1ca:	8c 91       	ld	r24, X
 1cc:	e6 58       	subi	r30, 0x86	; 134
 1ce:	fb 4f       	sbci	r31, 0xFB	; 251
 1d0:	80 83       	st	Z, r24
		for (SvArrayCount = 0; SvArrayCount <= SvArrayElements[SvNextLiveArr]; SvArrayCount++) {
 1d2:	e0 91 ad 04 	lds	r30, 0x04AD
 1d6:	f0 e0       	ldi	r31, 0x00	; 0
 1d8:	e6 58       	subi	r30, 0x86	; 134
 1da:	fb 4f       	sbci	r31, 0xFB	; 251
 1dc:	e0 81       	ld	r30, Z
 1de:	c0 e0       	ldi	r28, 0x00	; 0
 1e0:	d0 e0       	ldi	r29, 0x00	; 0
			temp1 = SvArrayCount << 8;  // temp1 is 16 bit, need 16 bit result
			temp2 = temp1 / ( SvArrayElements[SvNextLiveArr] + 1 ) ;  // temp2 is intermediate result to make the equation shorter
			temp3 = SvArrayCount << SvNoteFactor[SvNextLiveArr];  // temp3 is 16 bit, need 16 bit result
			temp4 = ( temp3 / ( SvArrayElements[SvNextLiveArr] + 1 ) ) << ( 8 - SvNoteFactor[SvNextLiveArr] );  // temp4 is intermediate result to make the equation shorter
			SvPlayArray[SvNextLiveArr][SvArrayCount] = (SvSineWaveLookup256[ (temp2 - temp4) << SvNoteFactor[SvNextLiveArr] ] * SvNoteForPlayArray.SvNoteVolume) >> 8;
 1e2:	88 e0       	ldi	r24, 0x08	; 8
 1e4:	a8 2e       	mov	r10, r24
 1e6:	b1 2c       	mov	r11, r1
		SvNoteHighNOTLow[SvNextLiveArr] = 1;  // set to true, this is a high note, not a low note
		SvNoteFactor[SvNextLiveArr] = ( (SvNoteForPlayArray.SvNoteNum - 48) / 12 );  // (1 << SvNoteFactor) is number of Sine Wave Cycles in the SvPlayArray
		SvArrayElements[SvNextLiveArr] = SvNoteWaveLength78K[SvNoteForPlayArray.SvNoteNum];
		for (SvArrayCount = 0; SvArrayCount <= SvArrayElements[SvNextLiveArr]; SvArrayCount++) {
			temp1 = SvArrayCount << 8;  // temp1 is 16 bit, need 16 bit result
			temp2 = temp1 / ( SvArrayElements[SvNextLiveArr] + 1 ) ;  // temp2 is intermediate result to make the equation shorter
 1e8:	e0 91 ad 04 	lds	r30, 0x04AD
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	e6 58       	subi	r30, 0x86	; 134
 1f0:	fb 4f       	sbci	r31, 0xFB	; 251
 1f2:	60 81       	ld	r22, Z
			temp3 = SvArrayCount << SvNoteFactor[SvNextLiveArr];  // temp3 is 16 bit, need 16 bit result
 1f4:	e0 91 ad 04 	lds	r30, 0x04AD
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	ec 57       	subi	r30, 0x7C	; 124
 1fc:	fb 4f       	sbci	r31, 0xFB	; 251
 1fe:	00 81       	ld	r16, Z
			temp4 = ( temp3 / ( SvArrayElements[SvNextLiveArr] + 1 ) ) << ( 8 - SvNoteFactor[SvNextLiveArr] );  // temp4 is intermediate result to make the equation shorter
 200:	e0 91 ad 04 	lds	r30, 0x04AD
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	e6 58       	subi	r30, 0x86	; 134
 208:	fb 4f       	sbci	r31, 0xFB	; 251
 20a:	20 81       	ld	r18, Z
 20c:	e0 91 ad 04 	lds	r30, 0x04AD
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	ec 57       	subi	r30, 0x7C	; 124
 214:	fb 4f       	sbci	r31, 0xFB	; 251
 216:	10 81       	ld	r17, Z
			SvPlayArray[SvNextLiveArr][SvArrayCount] = (SvSineWaveLookup256[ (temp2 - temp4) << SvNoteFactor[SvNextLiveArr] ] * SvNoteForPlayArray.SvNoteVolume) >> 8;
 218:	f0 90 ad 04 	lds	r15, 0x04AD
 21c:	e0 91 ad 04 	lds	r30, 0x04AD
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	ec 57       	subi	r30, 0x7C	; 124
 224:	fb 4f       	sbci	r31, 0xFB	; 251
 226:	40 81       	ld	r20, Z
 228:	70 e0       	ldi	r23, 0x00	; 0
 22a:	6f 5f       	subi	r22, 0xFF	; 255
 22c:	7f 4f       	sbci	r23, 0xFF	; 255
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	9c 2f       	mov	r25, r28
 232:	0e 94 bd 02 	call	0x57a	; 0x57a <__udivmodhi4>
 236:	e6 2f       	mov	r30, r22
 238:	f0 e0       	ldi	r31, 0x00	; 0
 23a:	30 e0       	ldi	r19, 0x00	; 0
 23c:	2f 5f       	subi	r18, 0xFF	; 255
 23e:	3f 4f       	sbci	r19, 0xFF	; 255
 240:	ce 01       	movw	r24, r28
 242:	02 c0       	rjmp	.+4      	; 0x248 <SfToneGenerator+0x1a2>
 244:	88 0f       	add	r24, r24
 246:	99 1f       	adc	r25, r25
 248:	0a 95       	dec	r16
 24a:	e2 f7       	brpl	.-8      	; 0x244 <SfToneGenerator+0x19e>
 24c:	b9 01       	movw	r22, r18
 24e:	0e 94 bd 02 	call	0x57a	; 0x57a <__udivmodhi4>
 252:	c5 01       	movw	r24, r10
 254:	81 1b       	sub	r24, r17
 256:	91 09       	sbc	r25, r1
 258:	02 c0       	rjmp	.+4      	; 0x25e <SfToneGenerator+0x1b8>
 25a:	66 0f       	add	r22, r22
 25c:	77 1f       	adc	r23, r23
 25e:	8a 95       	dec	r24
 260:	e2 f7       	brpl	.-8      	; 0x25a <SfToneGenerator+0x1b4>
 262:	e6 1b       	sub	r30, r22
 264:	f1 09       	sbc	r31, r1
 266:	02 c0       	rjmp	.+4      	; 0x26c <SfToneGenerator+0x1c6>
 268:	ee 0f       	add	r30, r30
 26a:	ff 1f       	adc	r31, r31
 26c:	4a 95       	dec	r20
 26e:	e2 f7       	brpl	.-8      	; 0x268 <SfToneGenerator+0x1c2>
 270:	e6 58       	subi	r30, 0x86	; 134
 272:	fe 4f       	sbci	r31, 0xFE	; 254
 274:	80 81       	ld	r24, Z
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	9c 01       	movw	r18, r24
 27a:	2c 9d       	mul	r18, r12
 27c:	c0 01       	movw	r24, r0
 27e:	2d 9d       	mul	r18, r13
 280:	90 0d       	add	r25, r0
 282:	3c 9d       	mul	r19, r12
 284:	90 0d       	add	r25, r0
 286:	11 24       	eor	r1, r1
 288:	3f 2d       	mov	r19, r15
 28a:	20 e0       	ldi	r18, 0x00	; 0
 28c:	f9 01       	movw	r30, r18
 28e:	ec 0f       	add	r30, r28
 290:	fd 1f       	adc	r31, r29
 292:	e6 58       	subi	r30, 0x86	; 134
 294:	fd 4f       	sbci	r31, 0xFD	; 253
 296:	90 83       	st	Z, r25
		//step one 78K steps along the two or more (2, 4, 8, 16, 32 or 64) sine waves in SvPlayArray[] 
		
		SvNoteHighNOTLow[SvNextLiveArr] = 1;  // set to true, this is a high note, not a low note
		SvNoteFactor[SvNextLiveArr] = ( (SvNoteForPlayArray.SvNoteNum - 48) / 12 );  // (1 << SvNoteFactor) is number of Sine Wave Cycles in the SvPlayArray
		SvArrayElements[SvNextLiveArr] = SvNoteWaveLength78K[SvNoteForPlayArray.SvNoteNum];
		for (SvArrayCount = 0; SvArrayCount <= SvArrayElements[SvNextLiveArr]; SvArrayCount++) {
 298:	21 96       	adiw	r28, 0x01	; 1
 29a:	e0 91 ad 04 	lds	r30, 0x04AD
 29e:	f0 e0       	ldi	r31, 0x00	; 0
 2a0:	e6 58       	subi	r30, 0x86	; 134
 2a2:	fb 4f       	sbci	r31, 0xFB	; 251
 2a4:	80 81       	ld	r24, Z
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	8c 17       	cp	r24, r28
 2aa:	9d 07       	cpc	r25, r29
 2ac:	08 f0       	brcs	.+2      	; 0x2b0 <SfToneGenerator+0x20a>
 2ae:	9c cf       	rjmp	.-200    	; 0x1e8 <SfToneGenerator+0x142>
 2b0:	67 cf       	rjmp	.-306    	; 0x180 <SfToneGenerator+0xda>

000002b2 <Start_Timer0_PWM>:
	}
}

void Start_Timer0_PWM (void) {
	
	DDRD = (1 << DDD6);  // set OC0A PWM pin as output (PD6, pin 12)
 2b2:	80 e4       	ldi	r24, 0x40	; 64
 2b4:	8a b9       	out	0x0a, r24	; 10
	TCCR0A |= (1 << WGM01) | (1 << WGM00);  // set timer 0 for Fast PWM mode
 2b6:	84 b5       	in	r24, 0x24	; 36
 2b8:	83 60       	ori	r24, 0x03	; 3
 2ba:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1 << COM0A1);  // Clear OC0A on Compare Match, set OC0A at BOTTOM
 2bc:	84 b5       	in	r24, 0x24	; 36
 2be:	80 68       	ori	r24, 0x80	; 128
 2c0:	84 bd       	out	0x24, r24	; 36
	TIMSK0 |= (1 << TOIE0);  // Enable PWM overflow interrupt, REMEMBER TO START ALL INTERRUPTS sei(); 
 2c2:	ee e6       	ldi	r30, 0x6E	; 110
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	80 81       	ld	r24, Z
 2c8:	81 60       	ori	r24, 0x01	; 1
 2ca:	80 83       	st	Z, r24
	OCR0A = 0;  // set Output Compare Register A to 0 (one cycle on per 256)
 2cc:	17 bc       	out	0x27, r1	; 39
	//OCR0A = 0x00;  // test for designing and verifying the transistor amplifier circuit
	TCCR0B |= (1 << CS00);  // start PWM timer with no prescaler
 2ce:	85 b5       	in	r24, 0x25	; 37
 2d0:	81 60       	ori	r24, 0x01	; 1
 2d2:	85 bd       	out	0x25, r24	; 37
}
 2d4:	08 95       	ret

000002d6 <main>:
struct NoteStruct SvNoteForPlayArray;

void SfToneGenerator (struct NoteStruct SvNoteForPlayArray);
void Start_Timer0_PWM (void);

int main (void) {
 2d6:	1f 93       	push	r17
	//SvDurationResolution[0] = 511;
	//SvDurationResolution[1] = 511;
	// END TEST
	//SvDurationResolution = 2441;  // temp test for math, 2441 is 32 per second ( 78,125 PWM cycles-per-second * 60 seconds ) / (120BPM * 16) for 16th notes resolution
	//SvDurationResolution = 305;  // temp test for math, 305 is 256 per second ( 78,125 PWM cycles-per-second * 60 seconds ) / (120 BPM * 128) for 128th notes resolution
	SvDurationResolution[0] = ( (uint32_t)4687500 / SvMusicTempoBPMxSub ) - 1 ;  // number of PWM duty cycles in a minute is 4,687,500 = 78,125 * 60
 2d8:	81 e6       	ldi	r24, 0x61	; 97
 2da:	92 e0       	ldi	r25, 0x02	; 2
 2dc:	90 93 81 04 	sts	0x0481, r25
 2e0:	80 93 80 04 	sts	0x0480, r24
	SvDurationResolution[1] = ( (uint32_t)4687500 / SvMusicTempoBPMxSub ) - 1 ;  // number of PWM duty cycles in a minute is 4,687,500 = 78,125 * 60
 2e4:	90 93 83 04 	sts	0x0483, r25
 2e8:	80 93 82 04 	sts	0x0482, r24
	
	
	SvNumberOfNotesToPlay = 7;  // start counting from 0 here
 2ec:	87 e0       	ldi	r24, 0x07	; 7
 2ee:	80 93 af 04 	sts	0x04AF, r24
	
	SvNotesToPlay[0].SvNoteNum = 3;
 2f2:	83 e0       	ldi	r24, 0x03	; 3
 2f4:	80 93 88 04 	sts	0x0488, r24
	SvNotesToPlay[0].SvNoteDuration = 31;
 2f8:	9f e1       	ldi	r25, 0x1F	; 31
 2fa:	90 93 89 04 	sts	0x0489, r25
	SvNotesToPlay[0].SvNoteVolume = 127;
 2fe:	2f e7       	ldi	r18, 0x7F	; 127
 300:	30 e0       	ldi	r19, 0x00	; 0
 302:	30 93 8b 04 	sts	0x048B, r19
 306:	20 93 8a 04 	sts	0x048A, r18
	
	SvNotesToPlay[1].SvNoteNum = 15;
 30a:	8f e0       	ldi	r24, 0x0F	; 15
 30c:	80 93 8c 04 	sts	0x048C, r24
	SvNotesToPlay[1].SvNoteDuration = 31;
 310:	90 93 8d 04 	sts	0x048D, r25
	SvNotesToPlay[1].SvNoteVolume = 127;
 314:	30 93 8f 04 	sts	0x048F, r19
 318:	20 93 8e 04 	sts	0x048E, r18
	
	SvNotesToPlay[2].SvNoteNum = 27;
 31c:	8b e1       	ldi	r24, 0x1B	; 27
 31e:	80 93 90 04 	sts	0x0490, r24
	SvNotesToPlay[2].SvNoteDuration = 31;
 322:	90 93 91 04 	sts	0x0491, r25
	SvNotesToPlay[2].SvNoteVolume = 127;
 326:	30 93 93 04 	sts	0x0493, r19
 32a:	20 93 92 04 	sts	0x0492, r18
	
	SvNotesToPlay[3].SvNoteNum = 39;
 32e:	87 e2       	ldi	r24, 0x27	; 39
 330:	80 93 94 04 	sts	0x0494, r24
	SvNotesToPlay[3].SvNoteDuration = 31;
 334:	90 93 95 04 	sts	0x0495, r25
	SvNotesToPlay[3].SvNoteVolume = 127;
 338:	30 93 97 04 	sts	0x0497, r19
 33c:	20 93 96 04 	sts	0x0496, r18
	
	SvNotesToPlay[4].SvNoteNum = 51;
 340:	83 e3       	ldi	r24, 0x33	; 51
 342:	80 93 98 04 	sts	0x0498, r24
	SvNotesToPlay[4].SvNoteDuration = 31;
 346:	90 93 99 04 	sts	0x0499, r25
	SvNotesToPlay[4].SvNoteVolume = 127;
 34a:	30 93 9b 04 	sts	0x049B, r19
 34e:	20 93 9a 04 	sts	0x049A, r18
	
	SvNotesToPlay[5].SvNoteNum = 63;
 352:	8f e3       	ldi	r24, 0x3F	; 63
 354:	80 93 9c 04 	sts	0x049C, r24
	SvNotesToPlay[5].SvNoteDuration = 31;
 358:	90 93 9d 04 	sts	0x049D, r25
	SvNotesToPlay[5].SvNoteVolume = 127;
 35c:	30 93 9f 04 	sts	0x049F, r19
 360:	20 93 9e 04 	sts	0x049E, r18
	
	SvNotesToPlay[6].SvNoteNum = 75;
 364:	8b e4       	ldi	r24, 0x4B	; 75
 366:	80 93 a0 04 	sts	0x04A0, r24
	SvNotesToPlay[6].SvNoteDuration = 31;
 36a:	90 93 a1 04 	sts	0x04A1, r25
	SvNotesToPlay[6].SvNoteVolume = 127;
 36e:	30 93 a3 04 	sts	0x04A3, r19
 372:	20 93 a2 04 	sts	0x04A2, r18
	
	SvNotesToPlay[7].SvNoteNum = 87;
 376:	87 e5       	ldi	r24, 0x57	; 87
 378:	80 93 a4 04 	sts	0x04A4, r24
	SvNotesToPlay[7].SvNoteDuration = 31;
 37c:	90 93 a5 04 	sts	0x04A5, r25
	SvNotesToPlay[7].SvNoteVolume = 127;
 380:	30 93 a7 04 	sts	0x04A7, r19
 384:	20 93 a6 04 	sts	0x04A6, r18
	
	SvLiveArr = 1;
 388:	11 e0       	ldi	r17, 0x01	; 1
 38a:	10 93 87 04 	sts	0x0487, r17
	SvNextLiveArr = 0;
 38e:	10 92 ad 04 	sts	0x04AD, r1
	SfToneGenerator(SvNotesToPlay[0]);  // fill the SvPlayArray[0] with useful data
 392:	60 91 88 04 	lds	r22, 0x0488
 396:	70 91 89 04 	lds	r23, 0x0489
 39a:	80 91 8a 04 	lds	r24, 0x048A
 39e:	90 91 8b 04 	lds	r25, 0x048B
 3a2:	0e 94 53 00 	call	0xa6	; 0xa6 <SfToneGenerator>
	SvLiveArr = 0;
 3a6:	10 92 87 04 	sts	0x0487, r1
	SvNextLiveArr = 1;
 3aa:	10 93 ad 04 	sts	0x04AD, r17
	
	SvNoteStructNum = 1;
	SvResetGoToNextNote = 0;
 3ae:	10 92 a9 04 	sts	0x04A9, r1
	SvStartCalculatingNextNote = 1;
 3b2:	10 93 b4 04 	sts	0x04B4, r17
	
	SvNextPWMValue = 127;
 3b6:	8f e7       	ldi	r24, 0x7F	; 127
 3b8:	80 93 aa 04 	sts	0x04AA, r24
	SvArrayLiveCounter = 0;
 3bc:	10 92 a8 04 	sts	0x04A8, r1
	SvFactor78KCounter = 0;
 3c0:	10 92 ae 04 	sts	0x04AE, r1
	SvLive78KCyclesCounter = 0;
 3c4:	10 92 ac 04 	sts	0x04AC, r1
 3c8:	10 92 ab 04 	sts	0x04AB, r1
	SvLiveNoteDurationCounter = 0;
 3cc:	10 92 86 04 	sts	0x0486, r1
	
	sei();  // DUH!
 3d0:	78 94       	sei
	Start_Timer0_PWM ();
 3d2:	0e 94 59 01 	call	0x2b2	; 0x2b2 <Start_Timer0_PWM>
	
	while (1) {
		
		if (SvStartCalculatingNextNote == 1) {
 3d6:	80 91 b4 04 	lds	r24, 0x04B4
 3da:	81 30       	cpi	r24, 0x01	; 1
 3dc:	e1 f7       	brne	.-8      	; 0x3d6 <main+0x100>
			SfToneGenerator(SvNotesToPlay[SvNoteStructNum]);
 3de:	e1 2f       	mov	r30, r17
 3e0:	f0 e0       	ldi	r31, 0x00	; 0
 3e2:	ee 0f       	add	r30, r30
 3e4:	ff 1f       	adc	r31, r31
 3e6:	ee 0f       	add	r30, r30
 3e8:	ff 1f       	adc	r31, r31
 3ea:	e8 57       	subi	r30, 0x78	; 120
 3ec:	fb 4f       	sbci	r31, 0xFB	; 251
 3ee:	60 81       	ld	r22, Z
 3f0:	71 81       	ldd	r23, Z+1	; 0x01
 3f2:	82 81       	ldd	r24, Z+2	; 0x02
 3f4:	93 81       	ldd	r25, Z+3	; 0x03
 3f6:	0e 94 53 00 	call	0xa6	; 0xa6 <SfToneGenerator>
			if (SvNoteStructNum >= SvNumberOfNotesToPlay) {
 3fa:	80 91 af 04 	lds	r24, 0x04AF
 3fe:	18 17       	cp	r17, r24
 400:	10 f0       	brcs	.+4      	; 0x406 <main+0x130>
	SvFactor78KCounter = 0;
	SvLive78KCyclesCounter = 0;
	SvLiveNoteDurationCounter = 0;
	
	sei();  // DUH!
	Start_Timer0_PWM ();
 402:	10 e0       	ldi	r17, 0x00	; 0
 404:	e8 cf       	rjmp	.-48     	; 0x3d6 <main+0x100>
		if (SvStartCalculatingNextNote == 1) {
			SfToneGenerator(SvNotesToPlay[SvNoteStructNum]);
			if (SvNoteStructNum >= SvNumberOfNotesToPlay) {
				SvNoteStructNum = 0;  // start over at beginning of list
			}
			else SvNoteStructNum++;
 406:	1f 5f       	subi	r17, 0xFF	; 255
 408:	e6 cf       	rjmp	.-52     	; 0x3d6 <main+0x100>

0000040a <__vector_16>:
	OCR0A = 0;  // set Output Compare Register A to 0 (one cycle on per 256)
	//OCR0A = 0x00;  // test for designing and verifying the transistor amplifier circuit
	TCCR0B |= (1 << CS00);  // start PWM timer with no prescaler
}

ISR(TIMER0_OVF_vect) {
 40a:	1f 92       	push	r1
 40c:	0f 92       	push	r0
 40e:	0f b6       	in	r0, 0x3f	; 63
 410:	0f 92       	push	r0
 412:	11 24       	eor	r1, r1
 414:	2f 93       	push	r18
 416:	3f 93       	push	r19
 418:	4f 93       	push	r20
 41a:	8f 93       	push	r24
 41c:	9f 93       	push	r25
 41e:	ef 93       	push	r30
 420:	ff 93       	push	r31
	
	OCR0A = SvNextPWMValue;  // all that for this, put the PWM value in the timer register
 422:	80 91 aa 04 	lds	r24, 0x04AA
 426:	87 bd       	out	0x27, r24	; 39
	SvNextPWMValue = SvPlayArray[SvLiveArr][SvArrayLiveCounter];
 428:	80 91 87 04 	lds	r24, 0x0487
 42c:	90 91 a8 04 	lds	r25, 0x04A8
 430:	f8 2f       	mov	r31, r24
 432:	e0 e0       	ldi	r30, 0x00	; 0
 434:	e9 0f       	add	r30, r25
 436:	f1 1d       	adc	r31, r1
 438:	e6 58       	subi	r30, 0x86	; 134
 43a:	fd 4f       	sbci	r31, 0xFD	; 253
 43c:	80 81       	ld	r24, Z
 43e:	80 93 aa 04 	sts	0x04AA, r24
	if ( SvNoteHighNOTLow[SvLiveArr] == 1 ) {  // this is a High note, notes > 59.  count through an element in the SvPlayArray[] for every 78k cycle.
 442:	e0 91 87 04 	lds	r30, 0x0487
 446:	f0 e0       	ldi	r31, 0x00	; 0
 448:	e4 58       	subi	r30, 0x84	; 132
 44a:	fb 4f       	sbci	r31, 0xFB	; 251
 44c:	80 81       	ld	r24, Z
 44e:	81 30       	cpi	r24, 0x01	; 1
 450:	09 f4       	brne	.+2      	; 0x454 <__vector_16+0x4a>
 452:	6b c0       	rjmp	.+214    	; 0x52a <__vector_16+0x120>
			SvArrayLiveCounter = 0;
		}
		else SvArrayLiveCounter++;
	}
	else {  // this is a low note, notes <= 59.  count through an element in the SvPlayArray[] for every (1 << SvNoteFactor) times 78k cycle.
		if ( SvFactor78KCounter >= ( ( 1 << SvNoteFactor[SvLiveArr] ) - 1 ) ) {
 454:	20 91 ae 04 	lds	r18, 0x04AE
 458:	e0 91 87 04 	lds	r30, 0x0487
 45c:	f0 e0       	ldi	r31, 0x00	; 0
 45e:	ec 57       	subi	r30, 0x7C	; 124
 460:	fb 4f       	sbci	r31, 0xFB	; 251
 462:	40 81       	ld	r20, Z
 464:	30 e0       	ldi	r19, 0x00	; 0
 466:	81 e0       	ldi	r24, 0x01	; 1
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	02 c0       	rjmp	.+4      	; 0x470 <__vector_16+0x66>
 46c:	88 0f       	add	r24, r24
 46e:	99 1f       	adc	r25, r25
 470:	4a 95       	dec	r20
 472:	e2 f7       	brpl	.-8      	; 0x46c <__vector_16+0x62>
 474:	01 97       	sbiw	r24, 0x01	; 1
 476:	28 17       	cp	r18, r24
 478:	39 07       	cpc	r19, r25
 47a:	0c f0       	brlt	.+2      	; 0x47e <__vector_16+0x74>
 47c:	54 c0       	rjmp	.+168    	; 0x526 <__vector_16+0x11c>
			if (SvArrayLiveCounter >= SvArrayElements[SvLiveArr] ) {
				SvArrayLiveCounter = 0;
			}
			else SvArrayLiveCounter++;
		}
		else SvFactor78KCounter++;
 47e:	80 91 ae 04 	lds	r24, 0x04AE
 482:	8f 5f       	subi	r24, 0xFF	; 255
 484:	80 93 ae 04 	sts	0x04AE, r24
	}
	if (SvLive78KCyclesCounter >= SvDurationResolution[SvLiveArr] ) {
 488:	e0 91 87 04 	lds	r30, 0x0487
 48c:	f0 e0       	ldi	r31, 0x00	; 0
 48e:	ee 0f       	add	r30, r30
 490:	ff 1f       	adc	r31, r31
 492:	e0 58       	subi	r30, 0x80	; 128
 494:	fb 4f       	sbci	r31, 0xFB	; 251
 496:	20 81       	ld	r18, Z
 498:	31 81       	ldd	r19, Z+1	; 0x01
 49a:	80 91 ab 04 	lds	r24, 0x04AB
 49e:	90 91 ac 04 	lds	r25, 0x04AC
 4a2:	82 17       	cp	r24, r18
 4a4:	93 07       	cpc	r25, r19
 4a6:	08 f4       	brcc	.+2      	; 0x4aa <__vector_16+0xa0>
 4a8:	53 c0       	rjmp	.+166    	; 0x550 <__vector_16+0x146>
		SvLive78KCyclesCounter = 0;
 4aa:	10 92 ac 04 	sts	0x04AC, r1
 4ae:	10 92 ab 04 	sts	0x04AB, r1
		if (SvLiveNoteDurationCounter >= SvArrNoteDuration[SvLiveArr] ) {
 4b2:	e0 91 87 04 	lds	r30, 0x0487
 4b6:	f0 e0       	ldi	r31, 0x00	; 0
 4b8:	e2 58       	subi	r30, 0x82	; 130
 4ba:	fb 4f       	sbci	r31, 0xFB	; 251
 4bc:	90 81       	ld	r25, Z
 4be:	80 91 86 04 	lds	r24, 0x0486
 4c2:	89 17       	cp	r24, r25
 4c4:	08 f4       	brcc	.+2      	; 0x4c8 <__vector_16+0xbe>
 4c6:	4e c0       	rjmp	.+156    	; 0x564 <__vector_16+0x15a>
			SvLiveNoteDurationCounter = 0;
 4c8:	10 92 86 04 	sts	0x0486, r1
			SvResetGoToNextNote = 1;
 4cc:	81 e0       	ldi	r24, 0x01	; 1
 4ce:	80 93 a9 04 	sts	0x04A9, r24
		}
		else SvLiveNoteDurationCounter++;
	}
	else SvLive78KCyclesCounter++;
	
	if (SvResetGoToNextNote > 0 ) {  // reset the counter variables and change to the next note, swap SvLiveArr and SvNextLiveArr settings
 4d2:	80 91 a9 04 	lds	r24, 0x04A9
 4d6:	88 23       	and	r24, r24
 4d8:	d1 f0       	breq	.+52     	; 0x50e <__vector_16+0x104>
		SvResetGoToNextNote = 0;
 4da:	10 92 a9 04 	sts	0x04A9, r1
		SvNextPWMValue = 127;
 4de:	8f e7       	ldi	r24, 0x7F	; 127
 4e0:	80 93 aa 04 	sts	0x04AA, r24
		SvArrayLiveCounter = 0;
 4e4:	10 92 a8 04 	sts	0x04A8, r1
		SvLive78KCyclesCounter = 0;
 4e8:	10 92 ac 04 	sts	0x04AC, r1
 4ec:	10 92 ab 04 	sts	0x04AB, r1
		SvLiveNoteDurationCounter = 0;
 4f0:	10 92 86 04 	sts	0x0486, r1
		SvFactor78KCounter = 0;
 4f4:	10 92 ae 04 	sts	0x04AE, r1
		SvStartCalculatingNextNote = 1;  // flag indicates it's time to start calculating the new next note SvPlayArray
 4f8:	91 e0       	ldi	r25, 0x01	; 1
 4fa:	90 93 b4 04 	sts	0x04B4, r25
		if (SvLiveArr == 1) {  // toggle to the other array, it's now the "live" array being "played"
 4fe:	80 91 87 04 	lds	r24, 0x0487
 502:	81 30       	cpi	r24, 0x01	; 1
 504:	a9 f1       	breq	.+106    	; 0x570 <__vector_16+0x166>
			SvLiveArr = 0;
			SvNextLiveArr = 1;
		}
		else {
			SvLiveArr = 1;
 506:	90 93 87 04 	sts	0x0487, r25
			SvNextLiveArr = 0;
 50a:	10 92 ad 04 	sts	0x04AD, r1
		}
	}
}
 50e:	ff 91       	pop	r31
 510:	ef 91       	pop	r30
 512:	9f 91       	pop	r25
 514:	8f 91       	pop	r24
 516:	4f 91       	pop	r20
 518:	3f 91       	pop	r19
 51a:	2f 91       	pop	r18
 51c:	0f 90       	pop	r0
 51e:	0f be       	out	0x3f, r0	; 63
 520:	0f 90       	pop	r0
 522:	1f 90       	pop	r1
 524:	18 95       	reti
		}
		else SvArrayLiveCounter++;
	}
	else {  // this is a low note, notes <= 59.  count through an element in the SvPlayArray[] for every (1 << SvNoteFactor) times 78k cycle.
		if ( SvFactor78KCounter >= ( ( 1 << SvNoteFactor[SvLiveArr] ) - 1 ) ) {
			SvFactor78KCounter = 0;
 526:	10 92 ae 04 	sts	0x04AE, r1
			//SvNextPWMValue = SvPlayArray[SvLiveArr][SvArrayLiveCounter];
			if (SvArrayLiveCounter >= SvArrayElements[SvLiveArr] ) {
 52a:	e0 91 87 04 	lds	r30, 0x0487
 52e:	f0 e0       	ldi	r31, 0x00	; 0
 530:	e6 58       	subi	r30, 0x86	; 134
 532:	fb 4f       	sbci	r31, 0xFB	; 251
 534:	90 81       	ld	r25, Z
 536:	80 91 a8 04 	lds	r24, 0x04A8
 53a:	89 17       	cp	r24, r25
 53c:	18 f0       	brcs	.+6      	; 0x544 <__vector_16+0x13a>
				SvArrayLiveCounter = 0;
 53e:	10 92 a8 04 	sts	0x04A8, r1
 542:	a2 cf       	rjmp	.-188    	; 0x488 <__vector_16+0x7e>
			}
			else SvArrayLiveCounter++;
 544:	80 91 a8 04 	lds	r24, 0x04A8
 548:	8f 5f       	subi	r24, 0xFF	; 255
 54a:	80 93 a8 04 	sts	0x04A8, r24
 54e:	9c cf       	rjmp	.-200    	; 0x488 <__vector_16+0x7e>
			SvLiveNoteDurationCounter = 0;
			SvResetGoToNextNote = 1;
		}
		else SvLiveNoteDurationCounter++;
	}
	else SvLive78KCyclesCounter++;
 550:	80 91 ab 04 	lds	r24, 0x04AB
 554:	90 91 ac 04 	lds	r25, 0x04AC
 558:	01 96       	adiw	r24, 0x01	; 1
 55a:	90 93 ac 04 	sts	0x04AC, r25
 55e:	80 93 ab 04 	sts	0x04AB, r24
 562:	b7 cf       	rjmp	.-146    	; 0x4d2 <__vector_16+0xc8>
		SvLive78KCyclesCounter = 0;
		if (SvLiveNoteDurationCounter >= SvArrNoteDuration[SvLiveArr] ) {
			SvLiveNoteDurationCounter = 0;
			SvResetGoToNextNote = 1;
		}
		else SvLiveNoteDurationCounter++;
 564:	80 91 86 04 	lds	r24, 0x0486
 568:	8f 5f       	subi	r24, 0xFF	; 255
 56a:	80 93 86 04 	sts	0x0486, r24
 56e:	b1 cf       	rjmp	.-158    	; 0x4d2 <__vector_16+0xc8>
		SvLive78KCyclesCounter = 0;
		SvLiveNoteDurationCounter = 0;
		SvFactor78KCounter = 0;
		SvStartCalculatingNextNote = 1;  // flag indicates it's time to start calculating the new next note SvPlayArray
		if (SvLiveArr == 1) {  // toggle to the other array, it's now the "live" array being "played"
			SvLiveArr = 0;
 570:	10 92 87 04 	sts	0x0487, r1
			SvNextLiveArr = 1;
 574:	80 93 ad 04 	sts	0x04AD, r24
 578:	ca cf       	rjmp	.-108    	; 0x50e <__vector_16+0x104>

0000057a <__udivmodhi4>:
 57a:	aa 1b       	sub	r26, r26
 57c:	bb 1b       	sub	r27, r27
 57e:	51 e1       	ldi	r21, 0x11	; 17
 580:	07 c0       	rjmp	.+14     	; 0x590 <__udivmodhi4_ep>

00000582 <__udivmodhi4_loop>:
 582:	aa 1f       	adc	r26, r26
 584:	bb 1f       	adc	r27, r27
 586:	a6 17       	cp	r26, r22
 588:	b7 07       	cpc	r27, r23
 58a:	10 f0       	brcs	.+4      	; 0x590 <__udivmodhi4_ep>
 58c:	a6 1b       	sub	r26, r22
 58e:	b7 0b       	sbc	r27, r23

00000590 <__udivmodhi4_ep>:
 590:	88 1f       	adc	r24, r24
 592:	99 1f       	adc	r25, r25
 594:	5a 95       	dec	r21
 596:	a9 f7       	brne	.-22     	; 0x582 <__udivmodhi4_loop>
 598:	80 95       	com	r24
 59a:	90 95       	com	r25
 59c:	bc 01       	movw	r22, r24
 59e:	cd 01       	movw	r24, r26
 5a0:	08 95       	ret

000005a2 <__divmodhi4>:
 5a2:	97 fb       	bst	r25, 7
 5a4:	09 2e       	mov	r0, r25
 5a6:	07 26       	eor	r0, r23
 5a8:	0a d0       	rcall	.+20     	; 0x5be <__divmodhi4_neg1>
 5aa:	77 fd       	sbrc	r23, 7
 5ac:	04 d0       	rcall	.+8      	; 0x5b6 <__divmodhi4_neg2>
 5ae:	e5 df       	rcall	.-54     	; 0x57a <__udivmodhi4>
 5b0:	06 d0       	rcall	.+12     	; 0x5be <__divmodhi4_neg1>
 5b2:	00 20       	and	r0, r0
 5b4:	1a f4       	brpl	.+6      	; 0x5bc <__divmodhi4_exit>

000005b6 <__divmodhi4_neg2>:
 5b6:	70 95       	com	r23
 5b8:	61 95       	neg	r22
 5ba:	7f 4f       	sbci	r23, 0xFF	; 255

000005bc <__divmodhi4_exit>:
 5bc:	08 95       	ret

000005be <__divmodhi4_neg1>:
 5be:	f6 f7       	brtc	.-4      	; 0x5bc <__divmodhi4_exit>
 5c0:	90 95       	com	r25
 5c2:	81 95       	neg	r24
 5c4:	9f 4f       	sbci	r25, 0xFF	; 255
 5c6:	08 95       	ret

000005c8 <_exit>:
 5c8:	f8 94       	cli

000005ca <__stop_program>:
 5ca:	ff cf       	rjmp	.-2      	; 0x5ca <__stop_program>
