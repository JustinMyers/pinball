
slave1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  00000924  000009b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000924  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  0080011a  0080011a  000009d2  2**0
                  ALLOC
  3 .stab         00001d28  00000000  00000000  000009d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c84  00000000  00000000  000026fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  00003380  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000012c  00000000  00000000  00003400  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000004aa  00000000  00000000  0000352c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000002b6  00000000  00000000  000039d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000046b  00000000  00000000  00003c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000d0  00000000  00000000  000040f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000001a7  00000000  00000000  000041c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000000dc  00000000  00000000  0000436f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000086  00000000  00000000  0000444b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000018  00000000  00000000  000044d1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e2       	ldi	r30, 0x24	; 36
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 31       	cpi	r26, 0x1A	; 26
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	aa e1       	ldi	r26, 0x1A	; 26
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 32       	cpi	r26, 0x23	; 35
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 90 04 	jmp	0x920	; 0x920 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:

extern int BUTTON_1;

void animate();

int main(void) {
  a6:	ef 92       	push	r14
  a8:	ff 92       	push	r15
  aa:	0f 93       	push	r16
  ac:	1f 93       	push	r17
	USARTSetup();
  ae:	0e 94 74 00 	call	0xe8	; 0xe8 <USARTSetup>
	TIMERSetup();
  b2:	0e 94 88 00 	call	0x110	; 0x110 <TIMERSetup>
	
	led_setup();
  b6:	0e 94 25 01 	call	0x24a	; 0x24a <led_setup>
		//}
		//if( num < 0b0000000000000100 ) {
			//direction = 1;
		//}
		
		if( BUTTON_1 == 1 ) {
  ba:	80 91 21 01 	lds	r24, 0x0121
  be:	90 91 22 01 	lds	r25, 0x0122
  c2:	81 30       	cpi	r24, 0x01	; 1
  c4:	91 05       	cpc	r25, r1
  c6:	39 f4       	brne	.+14     	; 0xd6 <main+0x30>
			num = 0b1010101010101010;
  c8:	8a ea       	ldi	r24, 0xAA	; 170
  ca:	e8 2e       	mov	r14, r24
  cc:	8a ea       	ldi	r24, 0xAA	; 170
  ce:	f8 2e       	mov	r15, r24
  d0:	01 2d       	mov	r16, r1
  d2:	11 2d       	mov	r17, r1
  d4:	03 c0       	rjmp	.+6      	; 0xdc <main+0x36>
		}
		else {
			num = 0b0000000000000000;
  d6:	ee 24       	eor	r14, r14
  d8:	ff 24       	eor	r15, r15
  da:	87 01       	movw	r16, r14
		}
		
		read_button();
  dc:	0e 94 a6 01 	call	0x34c	; 0x34c <read_button>

		led_illuminate( num );
  e0:	c7 01       	movw	r24, r14
  e2:	0e 94 35 01 	call	0x26a	; 0x26a <led_illuminate>
		
		// delay_ms(500);
		
	}
  e6:	e9 cf       	rjmp	.-46     	; 0xba <main+0x14>

000000e8 <USARTSetup>:
#define stringify(expr) "#expr"

void delay_ms(uint16_t x); //General purpose delay

void USARTSetup(void) {
	UCSR0B |= (1 << RXEN0) | (1 << TXEN0);   // Turn on the transmission and reception circuitry 
  e8:	e1 ec       	ldi	r30, 0xC1	; 193
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
  ee:	88 61       	ori	r24, 0x18	; 24
  f0:	80 83       	st	Z, r24
	UCSR0C |= (1 << UCSZ00) | (1 << UCSZ01); // Use 8-bit character sizes 
  f2:	a2 ec       	ldi	r26, 0xC2	; 194
  f4:	b0 e0       	ldi	r27, 0x00	; 0
  f6:	8c 91       	ld	r24, X
  f8:	86 60       	ori	r24, 0x06	; 6
  fa:	8c 93       	st	X, r24
	UBRR0H = (USART_PRESCALE >> 8);          // Load upper 8-bits of the baud rate value into the high byte of the UBRR register 
  fc:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = USART_PRESCALE;                 // Load lower 8-bits of the baud rate value into the low byte of the UBRR register
 100:	8a e0       	ldi	r24, 0x0A	; 10
 102:	80 93 c4 00 	sts	0x00C4, r24
	
	// UCSR0B |= (1<<RXEN0)|(1<<RXCIE0);
	UCSR0B |= (1 << RXCIE0);                   // Enable the USART Receive Complete interrupt (USART_RXC)
 106:	80 81       	ld	r24, Z
 108:	80 68       	ori	r24, 0x80	; 128
 10a:	80 83       	st	Z, r24
	sei();                                   // Enable the Global Interrupt Enable flag
 10c:	78 94       	sei
}
 10e:	08 95       	ret

00000110 <TIMERSetup>:

void TIMERSetup(void){
	TCCR2A |= (1 << WGM21);                  // CTC mode, timer 2, page 162
 110:	e0 eb       	ldi	r30, 0xB0	; 176
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	82 60       	ori	r24, 0x02	; 2
 118:	80 83       	st	Z, r24
	OCR2A = 155;                             // set counter for about 1ms, 20MHz clock, 1/128 prescaler
 11a:	8b e9       	ldi	r24, 0x9B	; 155
 11c:	80 93 b3 00 	sts	0x00B3, r24
		                                     // calculated value was 155.25, Newbie's Guide to AVR Timers formula page 8
	TCCR2B |= ((1 << CS22) | (1 << CS20));   // start timer with Fcpu/128, page 164
 120:	e1 eb       	ldi	r30, 0xB1	; 177
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	80 81       	ld	r24, Z
 126:	85 60       	ori	r24, 0x05	; 5
 128:	80 83       	st	Z, r24
}
 12a:	08 95       	ret

0000012c <delay_ms>:
{
	for ( ; x > 0 ; x--){
		GTCCR |= (1 << TSM); // reset timer counter, page 167
		// if (TIFR2 & (1 << OCF2A)) // temp, test for timer flag,  Newbie's Guide to AVR Timers, page 14
		while (!(TIFR2 & (1 << OCF2A))){} // while NOT timer flag test, page 165
		TIFR2 = (1 << OCF2A); // clear CTC flag, timer 2, page 165
 12c:	32 e0       	ldi	r19, 0x02	; 2
}

//General short delays
void delay_ms(uint16_t x)
{
	for ( ; x > 0 ; x--){
 12e:	07 c0       	rjmp	.+14     	; 0x13e <delay_ms+0x12>
		GTCCR |= (1 << TSM); // reset timer counter, page 167
 130:	23 b5       	in	r18, 0x23	; 35
 132:	20 68       	ori	r18, 0x80	; 128
 134:	23 bd       	out	0x23, r18	; 35
		// if (TIFR2 & (1 << OCF2A)) // temp, test for timer flag,  Newbie's Guide to AVR Timers, page 14
		while (!(TIFR2 & (1 << OCF2A))){} // while NOT timer flag test, page 165
 136:	b9 9b       	sbis	0x17, 1	; 23
 138:	fe cf       	rjmp	.-4      	; 0x136 <delay_ms+0xa>
		TIFR2 = (1 << OCF2A); // clear CTC flag, timer 2, page 165
 13a:	37 bb       	out	0x17, r19	; 23
}

//General short delays
void delay_ms(uint16_t x)
{
	for ( ; x > 0 ; x--){
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	00 97       	sbiw	r24, 0x00	; 0
 140:	b9 f7       	brne	.-18     	; 0x130 <delay_ms+0x4>
		GTCCR |= (1 << TSM); // reset timer counter, page 167
		// if (TIFR2 & (1 << OCF2A)) // temp, test for timer flag,  Newbie's Guide to AVR Timers, page 14
		while (!(TIFR2 & (1 << OCF2A))){} // while NOT timer flag test, page 165
		TIFR2 = (1 << OCF2A); // clear CTC flag, timer 2, page 165
	}
}
 142:	08 95       	ret

00000144 <protocol_send_data>:
	int len = sprintf(packet, "%s%s%s", header, message, footer);

	protocol_send_data( packet );
}

void protocol_send_data(char data[]) {
 144:	cf 93       	push	r28
 146:	df 93       	push	r29
 148:	ec 01       	movw	r28, r24
	for(int i; data[i] != '\0'; i++) {
 14a:	0a c0       	rjmp	.+20     	; 0x160 <protocol_send_data+0x1c>
		while ((UCSR0A & (1 << UDRE0)) == 0) {}; // wait until there is room for the character
 14c:	90 91 c0 00 	lds	r25, 0x00C0
 150:	95 ff       	sbrs	r25, 5
 152:	fc cf       	rjmp	.-8      	; 0x14c <protocol_send_data+0x8>
		UDR0 = data[i];                          // put a character in the register
 154:	80 93 c6 00 	sts	0x00C6, r24
		delay_ms( 1 );                           // smallest communication delay 1000/sec.
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	0e 94 96 00 	call	0x12c	; 0x12c <delay_ms>

	protocol_send_data( packet );
}

void protocol_send_data(char data[]) {
	for(int i; data[i] != '\0'; i++) {
 160:	89 91       	ld	r24, Y+
 162:	88 23       	and	r24, r24
 164:	99 f7       	brne	.-26     	; 0x14c <protocol_send_data+0x8>
		while ((UCSR0A & (1 << UDRE0)) == 0) {}; // wait until there is room for the character
		UDR0 = data[i];                          // put a character in the register
		delay_ms( 1 );                           // smallest communication delay 1000/sec.
	}
}
 166:	df 91       	pop	r29
 168:	cf 91       	pop	r28
 16a:	08 95       	ret

0000016c <protocol_send_message>:
	OCR2A = 155;                             // set counter for about 1ms, 20MHz clock, 1/128 prescaler
		                                     // calculated value was 155.25, Newbie's Guide to AVR Timers formula page 8
	TCCR2B |= ((1 << CS22) | (1 << CS20));   // start timer with Fcpu/128, page 164
}

void protocol_send_message( int transmitter, int receiver, char message[] ) {
 16c:	ef 92       	push	r14
 16e:	ff 92       	push	r15
 170:	0f 93       	push	r16
 172:	1f 93       	push	r17
 174:	df 93       	push	r29
 176:	cf 93       	push	r28
 178:	cd b7       	in	r28, 0x3d	; 61
 17a:	de b7       	in	r29, 0x3e	; 62
 17c:	c2 50       	subi	r28, 0x02	; 2
 17e:	d2 40       	sbci	r29, 0x02	; 2
 180:	0f b6       	in	r0, 0x3f	; 63
 182:	f8 94       	cli
 184:	de bf       	out	0x3e, r29	; 62
 186:	0f be       	out	0x3f, r0	; 63
 188:	cd bf       	out	0x3d, r28	; 61
 18a:	7a 01       	movw	r14, r20
	// define the packet header
	char header[ 11 ];
	int header_len = sprintf( header, "st%#04dr%#04d", transmitter, receiver );
 18c:	2d b7       	in	r18, 0x3d	; 61
 18e:	3e b7       	in	r19, 0x3e	; 62
 190:	28 50       	subi	r18, 0x08	; 8
 192:	30 40       	sbci	r19, 0x00	; 0
 194:	0f b6       	in	r0, 0x3f	; 63
 196:	f8 94       	cli
 198:	3e bf       	out	0x3e, r19	; 62
 19a:	0f be       	out	0x3f, r0	; 63
 19c:	2d bf       	out	0x3d, r18	; 61
 19e:	ed b7       	in	r30, 0x3d	; 61
 1a0:	fe b7       	in	r31, 0x3e	; 62
 1a2:	31 96       	adiw	r30, 0x01	; 1
 1a4:	9e 01       	movw	r18, r28
 1a6:	2c 5f       	subi	r18, 0xFC	; 252
 1a8:	3f 4f       	sbci	r19, 0xFF	; 255
 1aa:	ad b7       	in	r26, 0x3d	; 61
 1ac:	be b7       	in	r27, 0x3e	; 62
 1ae:	12 96       	adiw	r26, 0x02	; 2
 1b0:	3c 93       	st	X, r19
 1b2:	2e 93       	st	-X, r18
 1b4:	11 97       	sbiw	r26, 0x01	; 1
 1b6:	21 e0       	ldi	r18, 0x01	; 1
 1b8:	31 e0       	ldi	r19, 0x01	; 1
 1ba:	33 83       	std	Z+3, r19	; 0x03
 1bc:	22 83       	std	Z+2, r18	; 0x02
 1be:	95 83       	std	Z+5, r25	; 0x05
 1c0:	84 83       	std	Z+4, r24	; 0x04
 1c2:	77 83       	std	Z+7, r23	; 0x07
 1c4:	66 83       	std	Z+6, r22	; 0x06
 1c6:	0e 94 af 01 	call	0x35e	; 0x35e <sprintf>
	
	// define the packet footer
	char footer[] = "e\n"; // NOTE THE NEWLINE, GET RID OF THIS IN THE FUTURE
 1ca:	de 01       	movw	r26, r28
 1cc:	11 96       	adiw	r26, 0x01	; 1
 1ce:	e6 e1       	ldi	r30, 0x16	; 22
 1d0:	f1 e0       	ldi	r31, 0x01	; 1
 1d2:	83 e0       	ldi	r24, 0x03	; 3
 1d4:	01 90       	ld	r0, Z+
 1d6:	0d 92       	st	X+, r0
 1d8:	81 50       	subi	r24, 0x01	; 1
 1da:	e1 f7       	brne	.-8      	; 0x1d4 <protocol_send_message+0x68>
	
	// start processing the message
	char packet[500];
	int len = sprintf(packet, "%s%s%s", header, message, footer);
 1dc:	00 d0       	rcall	.+0      	; 0x1de <protocol_send_message+0x72>
 1de:	ed b7       	in	r30, 0x3d	; 61
 1e0:	fe b7       	in	r31, 0x3e	; 62
 1e2:	31 96       	adiw	r30, 0x01	; 1
 1e4:	8e 01       	movw	r16, r28
 1e6:	01 5f       	subi	r16, 0xF1	; 241
 1e8:	1f 4f       	sbci	r17, 0xFF	; 255
 1ea:	ad b7       	in	r26, 0x3d	; 61
 1ec:	be b7       	in	r27, 0x3e	; 62
 1ee:	12 96       	adiw	r26, 0x02	; 2
 1f0:	1c 93       	st	X, r17
 1f2:	0e 93       	st	-X, r16
 1f4:	11 97       	sbiw	r26, 0x01	; 1
 1f6:	8f e0       	ldi	r24, 0x0F	; 15
 1f8:	91 e0       	ldi	r25, 0x01	; 1
 1fa:	93 83       	std	Z+3, r25	; 0x03
 1fc:	82 83       	std	Z+2, r24	; 0x02
 1fe:	ce 01       	movw	r24, r28
 200:	04 96       	adiw	r24, 0x04	; 4
 202:	95 83       	std	Z+5, r25	; 0x05
 204:	84 83       	std	Z+4, r24	; 0x04
 206:	f7 82       	std	Z+7, r15	; 0x07
 208:	e6 82       	std	Z+6, r14	; 0x06
 20a:	ce 01       	movw	r24, r28
 20c:	01 96       	adiw	r24, 0x01	; 1
 20e:	91 87       	std	Z+9, r25	; 0x09
 210:	80 87       	std	Z+8, r24	; 0x08
 212:	0e 94 af 01 	call	0x35e	; 0x35e <sprintf>

	protocol_send_data( packet );
 216:	2d b7       	in	r18, 0x3d	; 61
 218:	3e b7       	in	r19, 0x3e	; 62
 21a:	26 5f       	subi	r18, 0xF6	; 246
 21c:	3f 4f       	sbci	r19, 0xFF	; 255
 21e:	0f b6       	in	r0, 0x3f	; 63
 220:	f8 94       	cli
 222:	3e bf       	out	0x3e, r19	; 62
 224:	0f be       	out	0x3f, r0	; 63
 226:	2d bf       	out	0x3d, r18	; 61
 228:	c8 01       	movw	r24, r16
 22a:	0e 94 a2 00 	call	0x144	; 0x144 <protocol_send_data>
}
 22e:	ce 5f       	subi	r28, 0xFE	; 254
 230:	dd 4f       	sbci	r29, 0xFD	; 253
 232:	0f b6       	in	r0, 0x3f	; 63
 234:	f8 94       	cli
 236:	de bf       	out	0x3e, r29	; 62
 238:	0f be       	out	0x3f, r0	; 63
 23a:	cd bf       	out	0x3d, r28	; 61
 23c:	cf 91       	pop	r28
 23e:	df 91       	pop	r29
 240:	1f 91       	pop	r17
 242:	0f 91       	pop	r16
 244:	ff 90       	pop	r15
 246:	ef 90       	pop	r14
 248:	08 95       	ret

0000024a <led_setup>:
uint16_t static LEDs_On_Data;        // the LSB bits (bits 9-0) will show which LEDs will be on (LEDs 10-1)

void led_setup(void) {
	               // clock fuse bits set PB7 and PB6 to be XTAL2 and XTAL1
                   // the programmer uses PB5, PB6 and PB7 as SCK, MISO and MOSI
DDRB = 0b00000001; // XTAL2, XTAL1, SCK, MISO, MOSI, INPUT, INPUT, OUTPUT
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	84 b9       	out	0x04, r24	; 4
                   // PC7 is not a pin, the programmer uses PC6 as RESET
DDRC = 0b00000000; // N/A, RESET, INPUT, INPUT, INPUT, INPUT, INPUT, INPUT
 24e:	17 b8       	out	0x07, r1	; 7
                   // turning on RXEN0 and TXEN0 in the UCR0B register makes PD1 TXD and PD0 RXD
DDRD = 0b11111100; // OUTPUT, OUTPUT, OUTPUT, OUTPUT, OUTPUT, OUTPUT, TRANSMIT, RECEIVE
 250:	8c ef       	ldi	r24, 0xFC	; 252
 252:	8a b9       	out	0x0a, r24	; 10

PORTB = 0;
 254:	15 b8       	out	0x05, r1	; 5
PORTD = 0;
 256:	1b b8       	out	0x0b, r1	; 11
LED_PortB = 0;
 258:	10 92 1c 01 	sts	0x011C, r1
LED_PortD = 0;
 25c:	10 92 1d 01 	sts	0x011D, r1

LEDs_On_Data = 0; // set to zero for counting test
 260:	10 92 1b 01 	sts	0x011B, r1
 264:	10 92 1a 01 	sts	0x011A, r1

	
	// PORTB = 0b11111111;
	// PORTD = 0b11100011;
}
 268:	08 95       	ret

0000026a <led_illuminate>:

void led_illuminate( int LEDs_On_Data ) {
 26a:	0f 93       	push	r16
 26c:	1f 93       	push	r17
 26e:	cf 93       	push	r28
 270:	df 93       	push	r29
	
			LEDs_On_Data = LEDs_On_Data >> 3;
 272:	8c 01       	movw	r16, r24
 274:	93 e0       	ldi	r25, 0x03	; 3
 276:	15 95       	asr	r17
 278:	07 95       	ror	r16
 27a:	9a 95       	dec	r25
 27c:	e1 f7       	brne	.-8      	; 0x276 <led_illuminate+0xc>
			
		   for ( LED_row = 0 ; LED_row < 3 ; LED_row++ ){ // ? c question will this be run through this with 0, 1 and 2? not 3? I hope.
 27e:	10 92 1e 01 	sts	0x011E, r1
	   
		   LED_PortD = LED_PortD | 0b00011100; // turn all rows off, set PD4, PD3 and PD2 to 1, bitwise or
		   
		                                                   // row 1 left shift 2, row 2 left shift 3, row 3 left shift 4
		   LED_PortD = LED_PortD & ~(1 << (2 + LED_row) ); // set Port pin for the current row to 0, bitwise and (with bitwise negation ~)
 282:	c1 e0       	ldi	r28, 0x01	; 1
 284:	d0 e0       	ldi	r29, 0x00	; 0

void led_illuminate( int LEDs_On_Data ) {
	
			LEDs_On_Data = LEDs_On_Data >> 3;
			
		   for ( LED_row = 0 ; LED_row < 3 ; LED_row++ ){ // ? c question will this be run through this with 0, 1 and 2? not 3? I hope.
 286:	58 c0       	rjmp	.+176    	; 0x338 <led_illuminate+0xce>
	   
		   LED_PortD = LED_PortD | 0b00011100; // turn all rows off, set PD4, PD3 and PD2 to 1, bitwise or
		   
		                                                   // row 1 left shift 2, row 2 left shift 3, row 3 left shift 4
		   LED_PortD = LED_PortD & ~(1 << (2 + LED_row) ); // set Port pin for the current row to 0, bitwise and (with bitwise negation ~)
 288:	70 e0       	ldi	r23, 0x00	; 0
 28a:	cb 01       	movw	r24, r22
 28c:	02 96       	adiw	r24, 0x02	; 2
 28e:	9e 01       	movw	r18, r28
 290:	02 c0       	rjmp	.+4      	; 0x296 <led_illuminate+0x2c>
 292:	22 0f       	add	r18, r18
 294:	33 1f       	adc	r19, r19
 296:	8a 95       	dec	r24
 298:	e2 f7       	brpl	.-8      	; 0x292 <led_illuminate+0x28>
 29a:	a2 2f       	mov	r26, r18
 29c:	a0 95       	com	r26
	
			LEDs_On_Data = LEDs_On_Data >> 3;
			
		   for ( LED_row = 0 ; LED_row < 3 ; LED_row++ ){ // ? c question will this be run through this with 0, 1 and 2? not 3? I hope.
	   
		   LED_PortD = LED_PortD | 0b00011100; // turn all rows off, set PD4, PD3 and PD2 to 1, bitwise or
 29e:	80 91 1d 01 	lds	r24, 0x011D
 2a2:	8c 61       	ori	r24, 0x1C	; 28
		   
		                                                   // row 1 left shift 2, row 2 left shift 3, row 3 left shift 4
		   LED_PortD = LED_PortD & ~(1 << (2 + LED_row) ); // set Port pin for the current row to 0, bitwise and (with bitwise negation ~)
 2a4:	a8 23       	and	r26, r24
		   
		   for( int i = 0; i < 3; i++) {
		     int z = 5 + i;
		
		   if ( (LEDs_On_Data & (1 << ( (LED_row * 4) + i ) ) ) > 0){
 2a6:	66 0f       	add	r22, r22
 2a8:	77 1f       	adc	r23, r23
 2aa:	66 0f       	add	r22, r22
 2ac:	77 1f       	adc	r23, r23
 2ae:	9b 01       	movw	r18, r22
 2b0:	85 e0       	ldi	r24, 0x05	; 5
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	ae 01       	movw	r20, r28
 2b6:	02 2e       	mov	r0, r18
 2b8:	02 c0       	rjmp	.+4      	; 0x2be <led_illuminate+0x54>
 2ba:	44 0f       	add	r20, r20
 2bc:	55 1f       	adc	r21, r21
 2be:	0a 94       	dec	r0
 2c0:	e2 f7       	brpl	.-8      	; 0x2ba <led_illuminate+0x50>
 2c2:	40 23       	and	r20, r16
 2c4:	51 23       	and	r21, r17
 2c6:	fe 01       	movw	r30, r28
 2c8:	08 2e       	mov	r0, r24
 2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <led_illuminate+0x66>
 2cc:	ee 0f       	add	r30, r30
 2ce:	ff 1f       	adc	r31, r31
 2d0:	0a 94       	dec	r0
 2d2:	e2 f7       	brpl	.-8      	; 0x2cc <led_illuminate+0x62>
 2d4:	14 16       	cp	r1, r20
 2d6:	15 06       	cpc	r1, r21
 2d8:	14 f4       	brge	.+4      	; 0x2de <led_illuminate+0x74>
               LED_PortD = LED_PortD | ( 1 << z); // set column 1 bit to 1 (PORTD left shift 5 for PD5), if it is 1 in LEDs_On_Data
 2da:	ae 2b       	or	r26, r30
 2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <led_illuminate+0x78>
	       } else {
               LED_PortD = LED_PortD & ~( 1 << z); // set column 1 bit to 0 (PORTD left shift 5 for PD5), if it is 0 in LEDs_On_Data
 2de:	e0 95       	com	r30
 2e0:	ae 23       	and	r26, r30
 2e2:	2f 5f       	subi	r18, 0xFF	; 255
 2e4:	3f 4f       	sbci	r19, 0xFF	; 255
 2e6:	01 96       	adiw	r24, 0x01	; 1
		   LED_PortD = LED_PortD | 0b00011100; // turn all rows off, set PD4, PD3 and PD2 to 1, bitwise or
		   
		                                                   // row 1 left shift 2, row 2 left shift 3, row 3 left shift 4
		   LED_PortD = LED_PortD & ~(1 << (2 + LED_row) ); // set Port pin for the current row to 0, bitwise and (with bitwise negation ~)
		   
		   for( int i = 0; i < 3; i++) {
 2e8:	88 30       	cpi	r24, 0x08	; 8
 2ea:	91 05       	cpc	r25, r1
 2ec:	19 f7       	brne	.-58     	; 0x2b4 <led_illuminate+0x4a>
 2ee:	a0 93 1d 01 	sts	0x011D, r26
	       } else {
               LED_PortD = LED_PortD & ~( 1 << z); // set column 1 bit to 0 (PORTD left shift 5 for PD5), if it is 0 in LEDs_On_Data
		   }
		   }
		   
		   if ( (LEDs_On_Data & (1 << ( (LED_row * 4) + 3 ) ) ) > 0){
 2f2:	6d 5f       	subi	r22, 0xFD	; 253
 2f4:	7f 4f       	sbci	r23, 0xFF	; 255
 2f6:	ce 01       	movw	r24, r28
 2f8:	02 c0       	rjmp	.+4      	; 0x2fe <led_illuminate+0x94>
 2fa:	88 0f       	add	r24, r24
 2fc:	99 1f       	adc	r25, r25
 2fe:	6a 95       	dec	r22
 300:	e2 f7       	brpl	.-8      	; 0x2fa <led_illuminate+0x90>
 302:	80 23       	and	r24, r16
 304:	91 23       	and	r25, r17
 306:	20 91 1c 01 	lds	r18, 0x011C
 30a:	18 16       	cp	r1, r24
 30c:	19 06       	cpc	r1, r25
 30e:	14 f4       	brge	.+4      	; 0x314 <led_illuminate+0xaa>
			LED_PortB = LED_PortB | ( 1 << 0); // set column 4 bit to 1 (PORTB left shift 0 for PB0), if it is 1 in LEDs_On_Data
 310:	21 60       	ori	r18, 0x01	; 1
 312:	01 c0       	rjmp	.+2      	; 0x316 <led_illuminate+0xac>
	       } else {
		     LED_PortB = LED_PortB & ~( 1 << 0); // set column 4 bit to 0 (PORTB left shift 0 for PB0), if it is 0 in LEDs_On_Data
 314:	2e 7f       	andi	r18, 0xFE	; 254
 316:	20 93 1c 01 	sts	0x011C, r18
		   }

	       PORTB = LED_PortB;
 31a:	80 91 1c 01 	lds	r24, 0x011C
 31e:	85 b9       	out	0x05, r24	; 5
           PORTD = LED_PortD;
 320:	80 91 1d 01 	lds	r24, 0x011D
 324:	8b b9       	out	0x0b, r24	; 11
           		delay_ms(10);
 326:	8a e0       	ldi	r24, 0x0A	; 10
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	0e 94 96 00 	call	0x12c	; 0x12c <delay_ms>

void led_illuminate( int LEDs_On_Data ) {
	
			LEDs_On_Data = LEDs_On_Data >> 3;
			
		   for ( LED_row = 0 ; LED_row < 3 ; LED_row++ ){ // ? c question will this be run through this with 0, 1 and 2? not 3? I hope.
 32e:	80 91 1e 01 	lds	r24, 0x011E
 332:	8f 5f       	subi	r24, 0xFF	; 255
 334:	80 93 1e 01 	sts	0x011E, r24
 338:	60 91 1e 01 	lds	r22, 0x011E
 33c:	63 30       	cpi	r22, 0x03	; 3
 33e:	08 f4       	brcc	.+2      	; 0x342 <led_illuminate+0xd8>
 340:	a3 cf       	rjmp	.-186    	; 0x288 <led_illuminate+0x1e>

	       PORTB = LED_PortB;
           PORTD = LED_PortD;
           		delay_ms(10);
	}
}
 342:	df 91       	pop	r29
 344:	cf 91       	pop	r28
 346:	1f 91       	pop	r17
 348:	0f 91       	pop	r16
 34a:	08 95       	ret

0000034c <read_button>:
int BUTTON_2;


void read_button(void) {
	
	if(PINB & ( 1 << PINB0)) {
 34c:	18 9b       	sbis	0x03, 0	; 3
 34e:	06 c0       	rjmp	.+12     	; 0x35c <read_button+0x10>
		BUTTON_1 = 1;
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	90 93 22 01 	sts	0x0122, r25
 358:	80 93 21 01 	sts	0x0121, r24
 35c:	08 95       	ret

0000035e <sprintf>:
 35e:	ae e0       	ldi	r26, 0x0E	; 14
 360:	b0 e0       	ldi	r27, 0x00	; 0
 362:	e5 eb       	ldi	r30, 0xB5	; 181
 364:	f1 e0       	ldi	r31, 0x01	; 1
 366:	0c 94 67 04 	jmp	0x8ce	; 0x8ce <__prologue_saves__+0x1c>
 36a:	0d 89       	ldd	r16, Y+21	; 0x15
 36c:	1e 89       	ldd	r17, Y+22	; 0x16
 36e:	86 e0       	ldi	r24, 0x06	; 6
 370:	8c 83       	std	Y+4, r24	; 0x04
 372:	1a 83       	std	Y+2, r17	; 0x02
 374:	09 83       	std	Y+1, r16	; 0x01
 376:	8f ef       	ldi	r24, 0xFF	; 255
 378:	9f e7       	ldi	r25, 0x7F	; 127
 37a:	9e 83       	std	Y+6, r25	; 0x06
 37c:	8d 83       	std	Y+5, r24	; 0x05
 37e:	9e 01       	movw	r18, r28
 380:	27 5e       	subi	r18, 0xE7	; 231
 382:	3f 4f       	sbci	r19, 0xFF	; 255
 384:	ce 01       	movw	r24, r28
 386:	01 96       	adiw	r24, 0x01	; 1
 388:	6f 89       	ldd	r22, Y+23	; 0x17
 38a:	78 8d       	ldd	r23, Y+24	; 0x18
 38c:	a9 01       	movw	r20, r18
 38e:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <vfprintf>
 392:	ef 81       	ldd	r30, Y+7	; 0x07
 394:	f8 85       	ldd	r31, Y+8	; 0x08
 396:	e0 0f       	add	r30, r16
 398:	f1 1f       	adc	r31, r17
 39a:	10 82       	st	Z, r1
 39c:	2e 96       	adiw	r28, 0x0e	; 14
 39e:	e4 e0       	ldi	r30, 0x04	; 4
 3a0:	0c 94 83 04 	jmp	0x906	; 0x906 <__stack+0x7>

000003a4 <vfprintf>:
 3a4:	ac e0       	ldi	r26, 0x0C	; 12
 3a6:	b0 e0       	ldi	r27, 0x00	; 0
 3a8:	e8 ed       	ldi	r30, 0xD8	; 216
 3aa:	f1 e0       	ldi	r31, 0x01	; 1
 3ac:	0c 94 59 04 	jmp	0x8b2	; 0x8b2 <__prologue_saves__>
 3b0:	6c 01       	movw	r12, r24
 3b2:	1b 01       	movw	r2, r22
 3b4:	8a 01       	movw	r16, r20
 3b6:	fc 01       	movw	r30, r24
 3b8:	17 82       	std	Z+7, r1	; 0x07
 3ba:	16 82       	std	Z+6, r1	; 0x06
 3bc:	83 81       	ldd	r24, Z+3	; 0x03
 3be:	81 ff       	sbrs	r24, 1
 3c0:	d1 c1       	rjmp	.+930    	; 0x764 <vfprintf+0x3c0>
 3c2:	2e 01       	movw	r4, r28
 3c4:	08 94       	sec
 3c6:	41 1c       	adc	r4, r1
 3c8:	51 1c       	adc	r5, r1
 3ca:	f6 01       	movw	r30, r12
 3cc:	93 81       	ldd	r25, Z+3	; 0x03
 3ce:	f1 01       	movw	r30, r2
 3d0:	93 fd       	sbrc	r25, 3
 3d2:	85 91       	lpm	r24, Z+
 3d4:	93 ff       	sbrs	r25, 3
 3d6:	81 91       	ld	r24, Z+
 3d8:	1f 01       	movw	r2, r30
 3da:	88 23       	and	r24, r24
 3dc:	09 f4       	brne	.+2      	; 0x3e0 <vfprintf+0x3c>
 3de:	be c1       	rjmp	.+892    	; 0x75c <vfprintf+0x3b8>
 3e0:	85 32       	cpi	r24, 0x25	; 37
 3e2:	39 f4       	brne	.+14     	; 0x3f2 <vfprintf+0x4e>
 3e4:	93 fd       	sbrc	r25, 3
 3e6:	85 91       	lpm	r24, Z+
 3e8:	93 ff       	sbrs	r25, 3
 3ea:	81 91       	ld	r24, Z+
 3ec:	1f 01       	movw	r2, r30
 3ee:	85 32       	cpi	r24, 0x25	; 37
 3f0:	29 f4       	brne	.+10     	; 0x3fc <vfprintf+0x58>
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	b6 01       	movw	r22, r12
 3f6:	0e 94 cf 03 	call	0x79e	; 0x79e <fputc>
 3fa:	e7 cf       	rjmp	.-50     	; 0x3ca <vfprintf+0x26>
 3fc:	ee 24       	eor	r14, r14
 3fe:	ff 24       	eor	r15, r15
 400:	20 e0       	ldi	r18, 0x00	; 0
 402:	20 32       	cpi	r18, 0x20	; 32
 404:	b0 f4       	brcc	.+44     	; 0x432 <vfprintf+0x8e>
 406:	8b 32       	cpi	r24, 0x2B	; 43
 408:	69 f0       	breq	.+26     	; 0x424 <vfprintf+0x80>
 40a:	8c 32       	cpi	r24, 0x2C	; 44
 40c:	28 f4       	brcc	.+10     	; 0x418 <vfprintf+0x74>
 40e:	80 32       	cpi	r24, 0x20	; 32
 410:	51 f0       	breq	.+20     	; 0x426 <vfprintf+0x82>
 412:	83 32       	cpi	r24, 0x23	; 35
 414:	71 f4       	brne	.+28     	; 0x432 <vfprintf+0x8e>
 416:	0b c0       	rjmp	.+22     	; 0x42e <vfprintf+0x8a>
 418:	8d 32       	cpi	r24, 0x2D	; 45
 41a:	39 f0       	breq	.+14     	; 0x42a <vfprintf+0x86>
 41c:	80 33       	cpi	r24, 0x30	; 48
 41e:	49 f4       	brne	.+18     	; 0x432 <vfprintf+0x8e>
 420:	21 60       	ori	r18, 0x01	; 1
 422:	2c c0       	rjmp	.+88     	; 0x47c <vfprintf+0xd8>
 424:	22 60       	ori	r18, 0x02	; 2
 426:	24 60       	ori	r18, 0x04	; 4
 428:	29 c0       	rjmp	.+82     	; 0x47c <vfprintf+0xd8>
 42a:	28 60       	ori	r18, 0x08	; 8
 42c:	27 c0       	rjmp	.+78     	; 0x47c <vfprintf+0xd8>
 42e:	20 61       	ori	r18, 0x10	; 16
 430:	25 c0       	rjmp	.+74     	; 0x47c <vfprintf+0xd8>
 432:	27 fd       	sbrc	r18, 7
 434:	2c c0       	rjmp	.+88     	; 0x48e <vfprintf+0xea>
 436:	38 2f       	mov	r19, r24
 438:	30 53       	subi	r19, 0x30	; 48
 43a:	3a 30       	cpi	r19, 0x0A	; 10
 43c:	98 f4       	brcc	.+38     	; 0x464 <vfprintf+0xc0>
 43e:	26 ff       	sbrs	r18, 6
 440:	08 c0       	rjmp	.+16     	; 0x452 <vfprintf+0xae>
 442:	8e 2d       	mov	r24, r14
 444:	88 0f       	add	r24, r24
 446:	e8 2e       	mov	r14, r24
 448:	ee 0c       	add	r14, r14
 44a:	ee 0c       	add	r14, r14
 44c:	e8 0e       	add	r14, r24
 44e:	e3 0e       	add	r14, r19
 450:	15 c0       	rjmp	.+42     	; 0x47c <vfprintf+0xd8>
 452:	8f 2d       	mov	r24, r15
 454:	88 0f       	add	r24, r24
 456:	f8 2e       	mov	r15, r24
 458:	ff 0c       	add	r15, r15
 45a:	ff 0c       	add	r15, r15
 45c:	f8 0e       	add	r15, r24
 45e:	f3 0e       	add	r15, r19
 460:	20 62       	ori	r18, 0x20	; 32
 462:	0c c0       	rjmp	.+24     	; 0x47c <vfprintf+0xd8>
 464:	8e 32       	cpi	r24, 0x2E	; 46
 466:	21 f4       	brne	.+8      	; 0x470 <vfprintf+0xcc>
 468:	26 fd       	sbrc	r18, 6
 46a:	78 c1       	rjmp	.+752    	; 0x75c <vfprintf+0x3b8>
 46c:	20 64       	ori	r18, 0x40	; 64
 46e:	06 c0       	rjmp	.+12     	; 0x47c <vfprintf+0xd8>
 470:	8c 36       	cpi	r24, 0x6C	; 108
 472:	11 f4       	brne	.+4      	; 0x478 <vfprintf+0xd4>
 474:	20 68       	ori	r18, 0x80	; 128
 476:	02 c0       	rjmp	.+4      	; 0x47c <vfprintf+0xd8>
 478:	88 36       	cpi	r24, 0x68	; 104
 47a:	49 f4       	brne	.+18     	; 0x48e <vfprintf+0xea>
 47c:	f1 01       	movw	r30, r2
 47e:	93 fd       	sbrc	r25, 3
 480:	85 91       	lpm	r24, Z+
 482:	93 ff       	sbrs	r25, 3
 484:	81 91       	ld	r24, Z+
 486:	1f 01       	movw	r2, r30
 488:	88 23       	and	r24, r24
 48a:	09 f0       	breq	.+2      	; 0x48e <vfprintf+0xea>
 48c:	ba cf       	rjmp	.-140    	; 0x402 <vfprintf+0x5e>
 48e:	98 2f       	mov	r25, r24
 490:	95 54       	subi	r25, 0x45	; 69
 492:	93 30       	cpi	r25, 0x03	; 3
 494:	18 f0       	brcs	.+6      	; 0x49c <vfprintf+0xf8>
 496:	90 52       	subi	r25, 0x20	; 32
 498:	93 30       	cpi	r25, 0x03	; 3
 49a:	28 f4       	brcc	.+10     	; 0x4a6 <vfprintf+0x102>
 49c:	0c 5f       	subi	r16, 0xFC	; 252
 49e:	1f 4f       	sbci	r17, 0xFF	; 255
 4a0:	ff e3       	ldi	r31, 0x3F	; 63
 4a2:	f9 83       	std	Y+1, r31	; 0x01
 4a4:	0d c0       	rjmp	.+26     	; 0x4c0 <vfprintf+0x11c>
 4a6:	83 36       	cpi	r24, 0x63	; 99
 4a8:	31 f0       	breq	.+12     	; 0x4b6 <vfprintf+0x112>
 4aa:	83 37       	cpi	r24, 0x73	; 115
 4ac:	71 f0       	breq	.+28     	; 0x4ca <vfprintf+0x126>
 4ae:	83 35       	cpi	r24, 0x53	; 83
 4b0:	09 f0       	breq	.+2      	; 0x4b4 <vfprintf+0x110>
 4b2:	60 c0       	rjmp	.+192    	; 0x574 <vfprintf+0x1d0>
 4b4:	22 c0       	rjmp	.+68     	; 0x4fa <vfprintf+0x156>
 4b6:	f8 01       	movw	r30, r16
 4b8:	80 81       	ld	r24, Z
 4ba:	89 83       	std	Y+1, r24	; 0x01
 4bc:	0e 5f       	subi	r16, 0xFE	; 254
 4be:	1f 4f       	sbci	r17, 0xFF	; 255
 4c0:	42 01       	movw	r8, r4
 4c2:	71 e0       	ldi	r23, 0x01	; 1
 4c4:	a7 2e       	mov	r10, r23
 4c6:	b1 2c       	mov	r11, r1
 4c8:	16 c0       	rjmp	.+44     	; 0x4f6 <vfprintf+0x152>
 4ca:	62 e0       	ldi	r22, 0x02	; 2
 4cc:	66 2e       	mov	r6, r22
 4ce:	71 2c       	mov	r7, r1
 4d0:	60 0e       	add	r6, r16
 4d2:	71 1e       	adc	r7, r17
 4d4:	f8 01       	movw	r30, r16
 4d6:	80 80       	ld	r8, Z
 4d8:	91 80       	ldd	r9, Z+1	; 0x01
 4da:	26 ff       	sbrs	r18, 6
 4dc:	03 c0       	rjmp	.+6      	; 0x4e4 <vfprintf+0x140>
 4de:	6e 2d       	mov	r22, r14
 4e0:	70 e0       	ldi	r23, 0x00	; 0
 4e2:	02 c0       	rjmp	.+4      	; 0x4e8 <vfprintf+0x144>
 4e4:	6f ef       	ldi	r22, 0xFF	; 255
 4e6:	7f ef       	ldi	r23, 0xFF	; 255
 4e8:	c4 01       	movw	r24, r8
 4ea:	2c 87       	std	Y+12, r18	; 0x0c
 4ec:	0e 94 c4 03 	call	0x788	; 0x788 <strnlen>
 4f0:	5c 01       	movw	r10, r24
 4f2:	83 01       	movw	r16, r6
 4f4:	2c 85       	ldd	r18, Y+12	; 0x0c
 4f6:	2f 77       	andi	r18, 0x7F	; 127
 4f8:	17 c0       	rjmp	.+46     	; 0x528 <vfprintf+0x184>
 4fa:	52 e0       	ldi	r21, 0x02	; 2
 4fc:	65 2e       	mov	r6, r21
 4fe:	71 2c       	mov	r7, r1
 500:	60 0e       	add	r6, r16
 502:	71 1e       	adc	r7, r17
 504:	f8 01       	movw	r30, r16
 506:	80 80       	ld	r8, Z
 508:	91 80       	ldd	r9, Z+1	; 0x01
 50a:	26 ff       	sbrs	r18, 6
 50c:	03 c0       	rjmp	.+6      	; 0x514 <vfprintf+0x170>
 50e:	6e 2d       	mov	r22, r14
 510:	70 e0       	ldi	r23, 0x00	; 0
 512:	02 c0       	rjmp	.+4      	; 0x518 <vfprintf+0x174>
 514:	6f ef       	ldi	r22, 0xFF	; 255
 516:	7f ef       	ldi	r23, 0xFF	; 255
 518:	c4 01       	movw	r24, r8
 51a:	2c 87       	std	Y+12, r18	; 0x0c
 51c:	0e 94 b9 03 	call	0x772	; 0x772 <strnlen_P>
 520:	5c 01       	movw	r10, r24
 522:	2c 85       	ldd	r18, Y+12	; 0x0c
 524:	20 68       	ori	r18, 0x80	; 128
 526:	83 01       	movw	r16, r6
 528:	23 fd       	sbrc	r18, 3
 52a:	20 c0       	rjmp	.+64     	; 0x56c <vfprintf+0x1c8>
 52c:	08 c0       	rjmp	.+16     	; 0x53e <vfprintf+0x19a>
 52e:	80 e2       	ldi	r24, 0x20	; 32
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	b6 01       	movw	r22, r12
 534:	2c 87       	std	Y+12, r18	; 0x0c
 536:	0e 94 cf 03 	call	0x79e	; 0x79e <fputc>
 53a:	fa 94       	dec	r15
 53c:	2c 85       	ldd	r18, Y+12	; 0x0c
 53e:	8f 2d       	mov	r24, r15
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	a8 16       	cp	r10, r24
 544:	b9 06       	cpc	r11, r25
 546:	98 f3       	brcs	.-26     	; 0x52e <vfprintf+0x18a>
 548:	11 c0       	rjmp	.+34     	; 0x56c <vfprintf+0x1c8>
 54a:	f4 01       	movw	r30, r8
 54c:	27 fd       	sbrc	r18, 7
 54e:	85 91       	lpm	r24, Z+
 550:	27 ff       	sbrs	r18, 7
 552:	81 91       	ld	r24, Z+
 554:	4f 01       	movw	r8, r30
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	b6 01       	movw	r22, r12
 55a:	2c 87       	std	Y+12, r18	; 0x0c
 55c:	0e 94 cf 03 	call	0x79e	; 0x79e <fputc>
 560:	2c 85       	ldd	r18, Y+12	; 0x0c
 562:	f1 10       	cpse	r15, r1
 564:	fa 94       	dec	r15
 566:	08 94       	sec
 568:	a1 08       	sbc	r10, r1
 56a:	b1 08       	sbc	r11, r1
 56c:	a1 14       	cp	r10, r1
 56e:	b1 04       	cpc	r11, r1
 570:	61 f7       	brne	.-40     	; 0x54a <vfprintf+0x1a6>
 572:	f1 c0       	rjmp	.+482    	; 0x756 <vfprintf+0x3b2>
 574:	84 36       	cpi	r24, 0x64	; 100
 576:	11 f0       	breq	.+4      	; 0x57c <vfprintf+0x1d8>
 578:	89 36       	cpi	r24, 0x69	; 105
 57a:	49 f5       	brne	.+82     	; 0x5ce <vfprintf+0x22a>
 57c:	27 ff       	sbrs	r18, 7
 57e:	08 c0       	rjmp	.+16     	; 0x590 <vfprintf+0x1ec>
 580:	f8 01       	movw	r30, r16
 582:	60 81       	ld	r22, Z
 584:	71 81       	ldd	r23, Z+1	; 0x01
 586:	82 81       	ldd	r24, Z+2	; 0x02
 588:	93 81       	ldd	r25, Z+3	; 0x03
 58a:	0c 5f       	subi	r16, 0xFC	; 252
 58c:	1f 4f       	sbci	r17, 0xFF	; 255
 58e:	09 c0       	rjmp	.+18     	; 0x5a2 <vfprintf+0x1fe>
 590:	f8 01       	movw	r30, r16
 592:	60 81       	ld	r22, Z
 594:	71 81       	ldd	r23, Z+1	; 0x01
 596:	88 27       	eor	r24, r24
 598:	77 fd       	sbrc	r23, 7
 59a:	80 95       	com	r24
 59c:	98 2f       	mov	r25, r24
 59e:	0e 5f       	subi	r16, 0xFE	; 254
 5a0:	1f 4f       	sbci	r17, 0xFF	; 255
 5a2:	4f e6       	ldi	r20, 0x6F	; 111
 5a4:	b4 2e       	mov	r11, r20
 5a6:	b2 22       	and	r11, r18
 5a8:	97 ff       	sbrs	r25, 7
 5aa:	09 c0       	rjmp	.+18     	; 0x5be <vfprintf+0x21a>
 5ac:	90 95       	com	r25
 5ae:	80 95       	com	r24
 5b0:	70 95       	com	r23
 5b2:	61 95       	neg	r22
 5b4:	7f 4f       	sbci	r23, 0xFF	; 255
 5b6:	8f 4f       	sbci	r24, 0xFF	; 255
 5b8:	9f 4f       	sbci	r25, 0xFF	; 255
 5ba:	f0 e8       	ldi	r31, 0x80	; 128
 5bc:	bf 2a       	or	r11, r31
 5be:	a2 01       	movw	r20, r4
 5c0:	2a e0       	ldi	r18, 0x0A	; 10
 5c2:	30 e0       	ldi	r19, 0x00	; 0
 5c4:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <__ultoa_invert>
 5c8:	78 2e       	mov	r7, r24
 5ca:	74 18       	sub	r7, r4
 5cc:	45 c0       	rjmp	.+138    	; 0x658 <vfprintf+0x2b4>
 5ce:	85 37       	cpi	r24, 0x75	; 117
 5d0:	31 f4       	brne	.+12     	; 0x5de <vfprintf+0x23a>
 5d2:	3f ee       	ldi	r19, 0xEF	; 239
 5d4:	b3 2e       	mov	r11, r19
 5d6:	b2 22       	and	r11, r18
 5d8:	2a e0       	ldi	r18, 0x0A	; 10
 5da:	30 e0       	ldi	r19, 0x00	; 0
 5dc:	25 c0       	rjmp	.+74     	; 0x628 <vfprintf+0x284>
 5de:	99 ef       	ldi	r25, 0xF9	; 249
 5e0:	b9 2e       	mov	r11, r25
 5e2:	b2 22       	and	r11, r18
 5e4:	8f 36       	cpi	r24, 0x6F	; 111
 5e6:	c1 f0       	breq	.+48     	; 0x618 <vfprintf+0x274>
 5e8:	80 37       	cpi	r24, 0x70	; 112
 5ea:	20 f4       	brcc	.+8      	; 0x5f4 <vfprintf+0x250>
 5ec:	88 35       	cpi	r24, 0x58	; 88
 5ee:	09 f0       	breq	.+2      	; 0x5f2 <vfprintf+0x24e>
 5f0:	b5 c0       	rjmp	.+362    	; 0x75c <vfprintf+0x3b8>
 5f2:	0d c0       	rjmp	.+26     	; 0x60e <vfprintf+0x26a>
 5f4:	80 37       	cpi	r24, 0x70	; 112
 5f6:	21 f0       	breq	.+8      	; 0x600 <vfprintf+0x25c>
 5f8:	88 37       	cpi	r24, 0x78	; 120
 5fa:	09 f0       	breq	.+2      	; 0x5fe <vfprintf+0x25a>
 5fc:	af c0       	rjmp	.+350    	; 0x75c <vfprintf+0x3b8>
 5fe:	02 c0       	rjmp	.+4      	; 0x604 <vfprintf+0x260>
 600:	20 e1       	ldi	r18, 0x10	; 16
 602:	b2 2a       	or	r11, r18
 604:	b4 fe       	sbrs	r11, 4
 606:	0b c0       	rjmp	.+22     	; 0x61e <vfprintf+0x27a>
 608:	84 e0       	ldi	r24, 0x04	; 4
 60a:	b8 2a       	or	r11, r24
 60c:	08 c0       	rjmp	.+16     	; 0x61e <vfprintf+0x27a>
 60e:	b4 fe       	sbrs	r11, 4
 610:	09 c0       	rjmp	.+18     	; 0x624 <vfprintf+0x280>
 612:	e6 e0       	ldi	r30, 0x06	; 6
 614:	be 2a       	or	r11, r30
 616:	06 c0       	rjmp	.+12     	; 0x624 <vfprintf+0x280>
 618:	28 e0       	ldi	r18, 0x08	; 8
 61a:	30 e0       	ldi	r19, 0x00	; 0
 61c:	05 c0       	rjmp	.+10     	; 0x628 <vfprintf+0x284>
 61e:	20 e1       	ldi	r18, 0x10	; 16
 620:	30 e0       	ldi	r19, 0x00	; 0
 622:	02 c0       	rjmp	.+4      	; 0x628 <vfprintf+0x284>
 624:	20 e1       	ldi	r18, 0x10	; 16
 626:	32 e0       	ldi	r19, 0x02	; 2
 628:	b7 fe       	sbrs	r11, 7
 62a:	08 c0       	rjmp	.+16     	; 0x63c <vfprintf+0x298>
 62c:	f8 01       	movw	r30, r16
 62e:	60 81       	ld	r22, Z
 630:	71 81       	ldd	r23, Z+1	; 0x01
 632:	82 81       	ldd	r24, Z+2	; 0x02
 634:	93 81       	ldd	r25, Z+3	; 0x03
 636:	0c 5f       	subi	r16, 0xFC	; 252
 638:	1f 4f       	sbci	r17, 0xFF	; 255
 63a:	07 c0       	rjmp	.+14     	; 0x64a <vfprintf+0x2a6>
 63c:	f8 01       	movw	r30, r16
 63e:	60 81       	ld	r22, Z
 640:	71 81       	ldd	r23, Z+1	; 0x01
 642:	80 e0       	ldi	r24, 0x00	; 0
 644:	90 e0       	ldi	r25, 0x00	; 0
 646:	0e 5f       	subi	r16, 0xFE	; 254
 648:	1f 4f       	sbci	r17, 0xFF	; 255
 64a:	a2 01       	movw	r20, r4
 64c:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <__ultoa_invert>
 650:	78 2e       	mov	r7, r24
 652:	74 18       	sub	r7, r4
 654:	ff e7       	ldi	r31, 0x7F	; 127
 656:	bf 22       	and	r11, r31
 658:	b6 fe       	sbrs	r11, 6
 65a:	0b c0       	rjmp	.+22     	; 0x672 <vfprintf+0x2ce>
 65c:	2e ef       	ldi	r18, 0xFE	; 254
 65e:	b2 22       	and	r11, r18
 660:	7e 14       	cp	r7, r14
 662:	38 f4       	brcc	.+14     	; 0x672 <vfprintf+0x2ce>
 664:	b4 fe       	sbrs	r11, 4
 666:	07 c0       	rjmp	.+14     	; 0x676 <vfprintf+0x2d2>
 668:	b2 fc       	sbrc	r11, 2
 66a:	05 c0       	rjmp	.+10     	; 0x676 <vfprintf+0x2d2>
 66c:	8f ee       	ldi	r24, 0xEF	; 239
 66e:	b8 22       	and	r11, r24
 670:	02 c0       	rjmp	.+4      	; 0x676 <vfprintf+0x2d2>
 672:	a7 2c       	mov	r10, r7
 674:	01 c0       	rjmp	.+2      	; 0x678 <vfprintf+0x2d4>
 676:	ae 2c       	mov	r10, r14
 678:	8b 2d       	mov	r24, r11
 67a:	90 e0       	ldi	r25, 0x00	; 0
 67c:	b4 fe       	sbrs	r11, 4
 67e:	0d c0       	rjmp	.+26     	; 0x69a <vfprintf+0x2f6>
 680:	fe 01       	movw	r30, r28
 682:	e7 0d       	add	r30, r7
 684:	f1 1d       	adc	r31, r1
 686:	20 81       	ld	r18, Z
 688:	20 33       	cpi	r18, 0x30	; 48
 68a:	19 f4       	brne	.+6      	; 0x692 <vfprintf+0x2ee>
 68c:	e9 ee       	ldi	r30, 0xE9	; 233
 68e:	be 22       	and	r11, r30
 690:	09 c0       	rjmp	.+18     	; 0x6a4 <vfprintf+0x300>
 692:	a3 94       	inc	r10
 694:	b2 fe       	sbrs	r11, 2
 696:	06 c0       	rjmp	.+12     	; 0x6a4 <vfprintf+0x300>
 698:	04 c0       	rjmp	.+8      	; 0x6a2 <vfprintf+0x2fe>
 69a:	86 78       	andi	r24, 0x86	; 134
 69c:	90 70       	andi	r25, 0x00	; 0
 69e:	00 97       	sbiw	r24, 0x00	; 0
 6a0:	09 f0       	breq	.+2      	; 0x6a4 <vfprintf+0x300>
 6a2:	a3 94       	inc	r10
 6a4:	8b 2c       	mov	r8, r11
 6a6:	99 24       	eor	r9, r9
 6a8:	b3 fc       	sbrc	r11, 3
 6aa:	14 c0       	rjmp	.+40     	; 0x6d4 <vfprintf+0x330>
 6ac:	b0 fe       	sbrs	r11, 0
 6ae:	0f c0       	rjmp	.+30     	; 0x6ce <vfprintf+0x32a>
 6b0:	af 14       	cp	r10, r15
 6b2:	28 f4       	brcc	.+10     	; 0x6be <vfprintf+0x31a>
 6b4:	e7 2c       	mov	r14, r7
 6b6:	ef 0c       	add	r14, r15
 6b8:	ea 18       	sub	r14, r10
 6ba:	af 2c       	mov	r10, r15
 6bc:	08 c0       	rjmp	.+16     	; 0x6ce <vfprintf+0x32a>
 6be:	e7 2c       	mov	r14, r7
 6c0:	06 c0       	rjmp	.+12     	; 0x6ce <vfprintf+0x32a>
 6c2:	80 e2       	ldi	r24, 0x20	; 32
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	b6 01       	movw	r22, r12
 6c8:	0e 94 cf 03 	call	0x79e	; 0x79e <fputc>
 6cc:	a3 94       	inc	r10
 6ce:	af 14       	cp	r10, r15
 6d0:	c0 f3       	brcs	.-16     	; 0x6c2 <vfprintf+0x31e>
 6d2:	04 c0       	rjmp	.+8      	; 0x6dc <vfprintf+0x338>
 6d4:	af 14       	cp	r10, r15
 6d6:	10 f4       	brcc	.+4      	; 0x6dc <vfprintf+0x338>
 6d8:	fa 18       	sub	r15, r10
 6da:	01 c0       	rjmp	.+2      	; 0x6de <vfprintf+0x33a>
 6dc:	ff 24       	eor	r15, r15
 6de:	84 fe       	sbrs	r8, 4
 6e0:	0f c0       	rjmp	.+30     	; 0x700 <vfprintf+0x35c>
 6e2:	80 e3       	ldi	r24, 0x30	; 48
 6e4:	90 e0       	ldi	r25, 0x00	; 0
 6e6:	b6 01       	movw	r22, r12
 6e8:	0e 94 cf 03 	call	0x79e	; 0x79e <fputc>
 6ec:	82 fe       	sbrs	r8, 2
 6ee:	1f c0       	rjmp	.+62     	; 0x72e <vfprintf+0x38a>
 6f0:	81 fe       	sbrs	r8, 1
 6f2:	03 c0       	rjmp	.+6      	; 0x6fa <vfprintf+0x356>
 6f4:	88 e5       	ldi	r24, 0x58	; 88
 6f6:	90 e0       	ldi	r25, 0x00	; 0
 6f8:	10 c0       	rjmp	.+32     	; 0x71a <vfprintf+0x376>
 6fa:	88 e7       	ldi	r24, 0x78	; 120
 6fc:	90 e0       	ldi	r25, 0x00	; 0
 6fe:	0d c0       	rjmp	.+26     	; 0x71a <vfprintf+0x376>
 700:	c4 01       	movw	r24, r8
 702:	86 78       	andi	r24, 0x86	; 134
 704:	90 70       	andi	r25, 0x00	; 0
 706:	00 97       	sbiw	r24, 0x00	; 0
 708:	91 f0       	breq	.+36     	; 0x72e <vfprintf+0x38a>
 70a:	81 fc       	sbrc	r8, 1
 70c:	02 c0       	rjmp	.+4      	; 0x712 <vfprintf+0x36e>
 70e:	80 e2       	ldi	r24, 0x20	; 32
 710:	01 c0       	rjmp	.+2      	; 0x714 <vfprintf+0x370>
 712:	8b e2       	ldi	r24, 0x2B	; 43
 714:	b7 fc       	sbrc	r11, 7
 716:	8d e2       	ldi	r24, 0x2D	; 45
 718:	90 e0       	ldi	r25, 0x00	; 0
 71a:	b6 01       	movw	r22, r12
 71c:	0e 94 cf 03 	call	0x79e	; 0x79e <fputc>
 720:	06 c0       	rjmp	.+12     	; 0x72e <vfprintf+0x38a>
 722:	80 e3       	ldi	r24, 0x30	; 48
 724:	90 e0       	ldi	r25, 0x00	; 0
 726:	b6 01       	movw	r22, r12
 728:	0e 94 cf 03 	call	0x79e	; 0x79e <fputc>
 72c:	ea 94       	dec	r14
 72e:	7e 14       	cp	r7, r14
 730:	c0 f3       	brcs	.-16     	; 0x722 <vfprintf+0x37e>
 732:	7a 94       	dec	r7
 734:	f2 01       	movw	r30, r4
 736:	e7 0d       	add	r30, r7
 738:	f1 1d       	adc	r31, r1
 73a:	80 81       	ld	r24, Z
 73c:	90 e0       	ldi	r25, 0x00	; 0
 73e:	b6 01       	movw	r22, r12
 740:	0e 94 cf 03 	call	0x79e	; 0x79e <fputc>
 744:	77 20       	and	r7, r7
 746:	a9 f7       	brne	.-22     	; 0x732 <vfprintf+0x38e>
 748:	06 c0       	rjmp	.+12     	; 0x756 <vfprintf+0x3b2>
 74a:	80 e2       	ldi	r24, 0x20	; 32
 74c:	90 e0       	ldi	r25, 0x00	; 0
 74e:	b6 01       	movw	r22, r12
 750:	0e 94 cf 03 	call	0x79e	; 0x79e <fputc>
 754:	fa 94       	dec	r15
 756:	ff 20       	and	r15, r15
 758:	c1 f7       	brne	.-16     	; 0x74a <vfprintf+0x3a6>
 75a:	37 ce       	rjmp	.-914    	; 0x3ca <vfprintf+0x26>
 75c:	f6 01       	movw	r30, r12
 75e:	26 81       	ldd	r18, Z+6	; 0x06
 760:	37 81       	ldd	r19, Z+7	; 0x07
 762:	02 c0       	rjmp	.+4      	; 0x768 <vfprintf+0x3c4>
 764:	2f ef       	ldi	r18, 0xFF	; 255
 766:	3f ef       	ldi	r19, 0xFF	; 255
 768:	c9 01       	movw	r24, r18
 76a:	2c 96       	adiw	r28, 0x0c	; 12
 76c:	e2 e1       	ldi	r30, 0x12	; 18
 76e:	0c 94 75 04 	jmp	0x8ea	; 0x8ea <__epilogue_restores__>

00000772 <strnlen_P>:
 772:	fc 01       	movw	r30, r24
 774:	05 90       	lpm	r0, Z+
 776:	61 50       	subi	r22, 0x01	; 1
 778:	70 40       	sbci	r23, 0x00	; 0
 77a:	01 10       	cpse	r0, r1
 77c:	d8 f7       	brcc	.-10     	; 0x774 <strnlen_P+0x2>
 77e:	80 95       	com	r24
 780:	90 95       	com	r25
 782:	8e 0f       	add	r24, r30
 784:	9f 1f       	adc	r25, r31
 786:	08 95       	ret

00000788 <strnlen>:
 788:	fc 01       	movw	r30, r24
 78a:	61 50       	subi	r22, 0x01	; 1
 78c:	70 40       	sbci	r23, 0x00	; 0
 78e:	01 90       	ld	r0, Z+
 790:	01 10       	cpse	r0, r1
 792:	d8 f7       	brcc	.-10     	; 0x78a <strnlen+0x2>
 794:	80 95       	com	r24
 796:	90 95       	com	r25
 798:	8e 0f       	add	r24, r30
 79a:	9f 1f       	adc	r25, r31
 79c:	08 95       	ret

0000079e <fputc>:
 79e:	0f 93       	push	r16
 7a0:	1f 93       	push	r17
 7a2:	cf 93       	push	r28
 7a4:	df 93       	push	r29
 7a6:	8c 01       	movw	r16, r24
 7a8:	eb 01       	movw	r28, r22
 7aa:	8b 81       	ldd	r24, Y+3	; 0x03
 7ac:	81 ff       	sbrs	r24, 1
 7ae:	1b c0       	rjmp	.+54     	; 0x7e6 <fputc+0x48>
 7b0:	82 ff       	sbrs	r24, 2
 7b2:	0d c0       	rjmp	.+26     	; 0x7ce <fputc+0x30>
 7b4:	2e 81       	ldd	r18, Y+6	; 0x06
 7b6:	3f 81       	ldd	r19, Y+7	; 0x07
 7b8:	8c 81       	ldd	r24, Y+4	; 0x04
 7ba:	9d 81       	ldd	r25, Y+5	; 0x05
 7bc:	28 17       	cp	r18, r24
 7be:	39 07       	cpc	r19, r25
 7c0:	64 f4       	brge	.+24     	; 0x7da <fputc+0x3c>
 7c2:	e8 81       	ld	r30, Y
 7c4:	f9 81       	ldd	r31, Y+1	; 0x01
 7c6:	01 93       	st	Z+, r16
 7c8:	f9 83       	std	Y+1, r31	; 0x01
 7ca:	e8 83       	st	Y, r30
 7cc:	06 c0       	rjmp	.+12     	; 0x7da <fputc+0x3c>
 7ce:	e8 85       	ldd	r30, Y+8	; 0x08
 7d0:	f9 85       	ldd	r31, Y+9	; 0x09
 7d2:	80 2f       	mov	r24, r16
 7d4:	09 95       	icall
 7d6:	00 97       	sbiw	r24, 0x00	; 0
 7d8:	31 f4       	brne	.+12     	; 0x7e6 <fputc+0x48>
 7da:	8e 81       	ldd	r24, Y+6	; 0x06
 7dc:	9f 81       	ldd	r25, Y+7	; 0x07
 7de:	01 96       	adiw	r24, 0x01	; 1
 7e0:	9f 83       	std	Y+7, r25	; 0x07
 7e2:	8e 83       	std	Y+6, r24	; 0x06
 7e4:	02 c0       	rjmp	.+4      	; 0x7ea <fputc+0x4c>
 7e6:	0f ef       	ldi	r16, 0xFF	; 255
 7e8:	1f ef       	ldi	r17, 0xFF	; 255
 7ea:	c8 01       	movw	r24, r16
 7ec:	df 91       	pop	r29
 7ee:	cf 91       	pop	r28
 7f0:	1f 91       	pop	r17
 7f2:	0f 91       	pop	r16
 7f4:	08 95       	ret

000007f6 <__ultoa_invert>:
 7f6:	fa 01       	movw	r30, r20
 7f8:	aa 27       	eor	r26, r26
 7fa:	28 30       	cpi	r18, 0x08	; 8
 7fc:	51 f1       	breq	.+84     	; 0x852 <__ultoa_invert+0x5c>
 7fe:	20 31       	cpi	r18, 0x10	; 16
 800:	81 f1       	breq	.+96     	; 0x862 <__ultoa_invert+0x6c>
 802:	e8 94       	clt
 804:	6f 93       	push	r22
 806:	6e 7f       	andi	r22, 0xFE	; 254
 808:	6e 5f       	subi	r22, 0xFE	; 254
 80a:	7f 4f       	sbci	r23, 0xFF	; 255
 80c:	8f 4f       	sbci	r24, 0xFF	; 255
 80e:	9f 4f       	sbci	r25, 0xFF	; 255
 810:	af 4f       	sbci	r26, 0xFF	; 255
 812:	b1 e0       	ldi	r27, 0x01	; 1
 814:	3e d0       	rcall	.+124    	; 0x892 <__ultoa_invert+0x9c>
 816:	b4 e0       	ldi	r27, 0x04	; 4
 818:	3c d0       	rcall	.+120    	; 0x892 <__ultoa_invert+0x9c>
 81a:	67 0f       	add	r22, r23
 81c:	78 1f       	adc	r23, r24
 81e:	89 1f       	adc	r24, r25
 820:	9a 1f       	adc	r25, r26
 822:	a1 1d       	adc	r26, r1
 824:	68 0f       	add	r22, r24
 826:	79 1f       	adc	r23, r25
 828:	8a 1f       	adc	r24, r26
 82a:	91 1d       	adc	r25, r1
 82c:	a1 1d       	adc	r26, r1
 82e:	6a 0f       	add	r22, r26
 830:	71 1d       	adc	r23, r1
 832:	81 1d       	adc	r24, r1
 834:	91 1d       	adc	r25, r1
 836:	a1 1d       	adc	r26, r1
 838:	20 d0       	rcall	.+64     	; 0x87a <__ultoa_invert+0x84>
 83a:	09 f4       	brne	.+2      	; 0x83e <__ultoa_invert+0x48>
 83c:	68 94       	set
 83e:	3f 91       	pop	r19
 840:	2a e0       	ldi	r18, 0x0A	; 10
 842:	26 9f       	mul	r18, r22
 844:	11 24       	eor	r1, r1
 846:	30 19       	sub	r19, r0
 848:	30 5d       	subi	r19, 0xD0	; 208
 84a:	31 93       	st	Z+, r19
 84c:	de f6       	brtc	.-74     	; 0x804 <__ultoa_invert+0xe>
 84e:	cf 01       	movw	r24, r30
 850:	08 95       	ret
 852:	46 2f       	mov	r20, r22
 854:	47 70       	andi	r20, 0x07	; 7
 856:	40 5d       	subi	r20, 0xD0	; 208
 858:	41 93       	st	Z+, r20
 85a:	b3 e0       	ldi	r27, 0x03	; 3
 85c:	0f d0       	rcall	.+30     	; 0x87c <__ultoa_invert+0x86>
 85e:	c9 f7       	brne	.-14     	; 0x852 <__ultoa_invert+0x5c>
 860:	f6 cf       	rjmp	.-20     	; 0x84e <__ultoa_invert+0x58>
 862:	46 2f       	mov	r20, r22
 864:	4f 70       	andi	r20, 0x0F	; 15
 866:	40 5d       	subi	r20, 0xD0	; 208
 868:	4a 33       	cpi	r20, 0x3A	; 58
 86a:	18 f0       	brcs	.+6      	; 0x872 <__ultoa_invert+0x7c>
 86c:	49 5d       	subi	r20, 0xD9	; 217
 86e:	31 fd       	sbrc	r19, 1
 870:	40 52       	subi	r20, 0x20	; 32
 872:	41 93       	st	Z+, r20
 874:	02 d0       	rcall	.+4      	; 0x87a <__ultoa_invert+0x84>
 876:	a9 f7       	brne	.-22     	; 0x862 <__ultoa_invert+0x6c>
 878:	ea cf       	rjmp	.-44     	; 0x84e <__ultoa_invert+0x58>
 87a:	b4 e0       	ldi	r27, 0x04	; 4
 87c:	a6 95       	lsr	r26
 87e:	97 95       	ror	r25
 880:	87 95       	ror	r24
 882:	77 95       	ror	r23
 884:	67 95       	ror	r22
 886:	ba 95       	dec	r27
 888:	c9 f7       	brne	.-14     	; 0x87c <__ultoa_invert+0x86>
 88a:	00 97       	sbiw	r24, 0x00	; 0
 88c:	61 05       	cpc	r22, r1
 88e:	71 05       	cpc	r23, r1
 890:	08 95       	ret
 892:	9b 01       	movw	r18, r22
 894:	ac 01       	movw	r20, r24
 896:	0a 2e       	mov	r0, r26
 898:	06 94       	lsr	r0
 89a:	57 95       	ror	r21
 89c:	47 95       	ror	r20
 89e:	37 95       	ror	r19
 8a0:	27 95       	ror	r18
 8a2:	ba 95       	dec	r27
 8a4:	c9 f7       	brne	.-14     	; 0x898 <__ultoa_invert+0xa2>
 8a6:	62 0f       	add	r22, r18
 8a8:	73 1f       	adc	r23, r19
 8aa:	84 1f       	adc	r24, r20
 8ac:	95 1f       	adc	r25, r21
 8ae:	a0 1d       	adc	r26, r0
 8b0:	08 95       	ret

000008b2 <__prologue_saves__>:
 8b2:	2f 92       	push	r2
 8b4:	3f 92       	push	r3
 8b6:	4f 92       	push	r4
 8b8:	5f 92       	push	r5
 8ba:	6f 92       	push	r6
 8bc:	7f 92       	push	r7
 8be:	8f 92       	push	r8
 8c0:	9f 92       	push	r9
 8c2:	af 92       	push	r10
 8c4:	bf 92       	push	r11
 8c6:	cf 92       	push	r12
 8c8:	df 92       	push	r13
 8ca:	ef 92       	push	r14
 8cc:	ff 92       	push	r15
 8ce:	0f 93       	push	r16
 8d0:	1f 93       	push	r17
 8d2:	cf 93       	push	r28
 8d4:	df 93       	push	r29
 8d6:	cd b7       	in	r28, 0x3d	; 61
 8d8:	de b7       	in	r29, 0x3e	; 62
 8da:	ca 1b       	sub	r28, r26
 8dc:	db 0b       	sbc	r29, r27
 8de:	0f b6       	in	r0, 0x3f	; 63
 8e0:	f8 94       	cli
 8e2:	de bf       	out	0x3e, r29	; 62
 8e4:	0f be       	out	0x3f, r0	; 63
 8e6:	cd bf       	out	0x3d, r28	; 61
 8e8:	09 94       	ijmp

000008ea <__epilogue_restores__>:
 8ea:	2a 88       	ldd	r2, Y+18	; 0x12
 8ec:	39 88       	ldd	r3, Y+17	; 0x11
 8ee:	48 88       	ldd	r4, Y+16	; 0x10
 8f0:	5f 84       	ldd	r5, Y+15	; 0x0f
 8f2:	6e 84       	ldd	r6, Y+14	; 0x0e
 8f4:	7d 84       	ldd	r7, Y+13	; 0x0d
 8f6:	8c 84       	ldd	r8, Y+12	; 0x0c
 8f8:	9b 84       	ldd	r9, Y+11	; 0x0b
 8fa:	aa 84       	ldd	r10, Y+10	; 0x0a
 8fc:	b9 84       	ldd	r11, Y+9	; 0x09
 8fe:	c8 84       	ldd	r12, Y+8	; 0x08
 900:	df 80       	ldd	r13, Y+7	; 0x07
 902:	ee 80       	ldd	r14, Y+6	; 0x06
 904:	fd 80       	ldd	r15, Y+5	; 0x05
 906:	0c 81       	ldd	r16, Y+4	; 0x04
 908:	1b 81       	ldd	r17, Y+3	; 0x03
 90a:	aa 81       	ldd	r26, Y+2	; 0x02
 90c:	b9 81       	ldd	r27, Y+1	; 0x01
 90e:	ce 0f       	add	r28, r30
 910:	d1 1d       	adc	r29, r1
 912:	0f b6       	in	r0, 0x3f	; 63
 914:	f8 94       	cli
 916:	de bf       	out	0x3e, r29	; 62
 918:	0f be       	out	0x3f, r0	; 63
 91a:	cd bf       	out	0x3d, r28	; 61
 91c:	ed 01       	movw	r28, r26
 91e:	08 95       	ret

00000920 <_exit>:
 920:	f8 94       	cli

00000922 <__stop_program>:
 922:	ff cf       	rjmp	.-2      	; 0x922 <__stop_program>
